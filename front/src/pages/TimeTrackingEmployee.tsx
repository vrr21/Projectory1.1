import React, { useState, useEffect, useCallback } from "react";
import {
  Layout,
  Button,
  Form,
  Input,
  DatePicker,
  Upload,
  notification,
  Modal,
  App,
  Tooltip,
  InputNumber,
  Checkbox,
} from "antd";

import {
  InboxOutlined,
  EyeOutlined,
  EditOutlined,
  DeleteOutlined,
  LeftOutlined,
  RightOutlined,
  CalendarOutlined,
} from "@ant-design/icons";
import { Tabs, Table } from "antd";
import { UploadFile } from "antd/es/upload/interface";
import HeaderEmployee from "../components/HeaderEmployee";
import Sidebar from "../components/Sidebar";
import "../styles/pages/TimeTrackingEmployee.css";
import dayjs from "dayjs";
import isoWeek from "dayjs/plugin/isoWeek";
import weekday from "dayjs/plugin/weekday";
import localeData from "dayjs/plugin/localeData";
import "dayjs/locale/ru";
import { MessageOutlined, UserOutlined } from "@ant-design/icons";
import { List, Avatar } from "antd";
import { Dropdown } from "antd";
import { FilterOutlined } from "@ant-design/icons";
import { PlusOutlined } from "@ant-design/icons";
import { Select } from "antd";
import { Radio } from "antd";

dayjs.extend(isoWeek);
dayjs.extend(weekday);
dayjs.extend(localeData);
dayjs.locale("ru");

const { Content } = Layout;
const API_URL = import.meta.env.VITE_API_URL;

interface Project {
  ID_Order: string;
  Order_Name: string;
  ID_Team: string;
}

interface Task {
  ID_Task: string;
  Task_Name: string;
  Status: string;
  ID_Order: string;
  Time_Norm?: number;
}

interface TimeTrackingFormValues {
  project: string;
  taskName: string;
  description: string;
  hours: number;
  minutes: number;
  date: dayjs.Dayjs;
  file: UploadFile[];
  isCompleted?: boolean;
}

interface RawTimeEntry {
  ID_Execution: string;
  ID_Task: string;
  Task_Name: string;
  Order_Name: string;
  Start_Date: string;
  End_Date: string;
  Hours_Spent: number;
  Description?: string;
  Attachments?: string[];
  ID_User: string;
  ID_Employee: string;
  link?: string;
  Hours_Spent_Total?: number;
  Time_Norm?: number; 
  FitTimeNorm?: boolean;
  Employee_Email?: string;
}

interface CommentType {
  ID_Comment: number;
  CommentText: string;
  Created_At: string;
  AuthorName: string;
  Avatar?: string;
}

const TimeTrackingEmployee: React.FC = () => {
  const [form] = Form.useForm();
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [isViewModalVisible, setIsViewModalVisible] = useState(false);
  const [editingEntry, setEditingEntry] = useState<RawTimeEntry | null>(null);
  const [viewingEntry, setViewingEntry] = useState<RawTimeEntry | null>(null);
  const [timeEntries, setTimeEntries] = useState<RawTimeEntry[]>([]);
  const [projects, setProjects] = useState<Project[]>([]);
  const [tasks, setTasks] = useState<Task[]>([]);
  const [weekStart, setWeekStart] = useState(() => dayjs().startOf("isoWeek"));
  const [api, contextHolder] = notification.useNotification();
  const [comments, setComments] = useState<CommentType[]>([]);
  const [newComment, setNewComment] = useState("");
  const [isCommentsModalVisible, setIsCommentsModalVisible] = useState(false);
  const [editingFileList, setEditingFileList] = useState<UploadFile[]>([]);
  const [selectedProjectId, setSelectedProjectId] = useState<string | null>(
    null
  );
  const [searchQuery, setSearchQuery] = useState<string>("");
  const getFilteredEntriesByDay = (day: dayjs.Dayjs) =>
    filteredEntries.filter((entry) =>
      dayjs(entry.Start_Date).isSame(day, "day")
    );
  const activeTasks = tasks;

  const filteredEntries = selectedProjectId
    ? timeEntries.filter((entry) =>
        projects.some(
          (p) =>
            p.ID_Order === selectedProjectId &&
            p.Order_Name === entry.Order_Name
        )
      )
    : timeEntries;

  const weekDaysRu = [
    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "–í—Ç–æ—Ä–Ω–∏–∫",
    "–°—Ä–µ–¥–∞",
    "–ß–µ—Ç–≤–µ—Ä–≥",
    "–ü—è—Ç–Ω–∏—Ü–∞",
    "–°—É–±–±–æ—Ç–∞",
    "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
  ];

  const fetchProjects = useCallback(async () => {
    const token = localStorage.getItem("token");
    const userResponse = await fetch(`${API_URL}/api/auth/current-user`, {
      headers: { Authorization: `Bearer ${token}` },
    });
    const userData = await userResponse.json();
    const response = await fetch(`${API_URL}/api/projects`);
    const data = await response.json();
    setProjects(data.filter((p: Project) => p.ID_Team === userData.ID_Team));
  }, []);

  const fetchTasks = useCallback(async () => {
    const token = localStorage.getItem("token");
    const userResponse = await fetch(`${API_URL}/api/auth/current-user`, {
      headers: { Authorization: `Bearer ${token}` },
    });
    const userData = await userResponse.json();

    const res = await fetch(
      `${API_URL}/api/employees/${userData.ID_User}/tasks`,
      {
        headers: { Authorization: `Bearer ${token}` },
      }
    );

    const data = await res.json();
    setTasks(data);
  }, []);

  const fetchTimeEntries = useCallback(async () => {
    const token = localStorage.getItem("token");
    const userResponse = await fetch(`${API_URL}/api/auth/current-user`, {
      headers: { Authorization: `Bearer ${token}` },
    });
    const userData = await userResponse.json();

    const res = await fetch(`${API_URL}/api/time-tracking`, {
      headers: { Authorization: `Bearer ${token}` },
    });

    const allEntries: RawTimeEntry[] = await res.json();

    // üü¢ –í—Å—Ç–∞–≤–ª—è–µ–º –ª–æ–≥–∏
    console.log("–°—ã—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏:", allEntries);
    console.log("user.id:", userData.ID_User);

    const userEntries = allEntries.filter(
      (entry) => entry.ID_Employee === userData.ID_User
    );

    setTimeEntries(userEntries);
  }, []);

  useEffect(() => {
    fetchProjects();
    fetchTasks();
    fetchTimeEntries();
  }, [fetchProjects, fetchTasks, fetchTimeEntries]);

  const handleEdit = (entry: RawTimeEntry) => {
    const project = projects.find(
      (p) => p.Order_Name === entry.Order_Name
    )?.ID_Order;

    const fileList: UploadFile[] = (entry.Attachments || []).map(
      (filename, index) => ({
        uid: `${index}`,
        name: filename,
        status: "done",
        url: `${API_URL}/uploads/${filename}`,
      })
    );
    if (entry.link) {
      fileList.push({
        uid: `link`,
        name: "–°—Å—ã–ª–∫–∞",
        status: "done",
        url: entry.link,
      });
    }
    setEditingFileList(fileList);

    setEditingEntry(entry);

    const hours = Math.floor(entry.Hours_Spent);
    const minutes = Math.round((entry.Hours_Spent - hours) * 60);

    const attachmentType = entry.link ? "link" : "file";

    form.setFieldsValue({
      project,
      taskName: entry.ID_Task,
      hours,
      minutes,
      date: dayjs(entry.Start_Date),
      description: entry.Description || "",
      attachmentType,
      file: fileList,
      link: entry.link || "",
    });

    setIsModalVisible(true);
  };

  const handleDelete = async (id: string) => {
    try {
      const token = localStorage.getItem("token");
      const res = await fetch(`${API_URL}/api/time-tracking/${id}`, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (!res.ok) {
        const errorText = await res.text();
        throw new Error(`–û—à–∏–±–∫–∞ ${res.status}: ${errorText}`);
      }

      api.success({ message: "–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞" });
      fetchTimeEntries();
    } catch (error: unknown) {
      if (error instanceof Error) {
        api.error({ message: `–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${error.message}` });
      } else {
        api.error({ message: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏" });
      }
    }
  };

  const handleFormSubmit = async (
    values: TimeTrackingFormValues & { attachmentType: string; link?: string }
  ) => {
    const token = localStorage.getItem("token");

    const totalHours = (values.hours || 0) + (values.minutes || 0) / 60;

    const selectedTask = tasks.find((t) => t.ID_Task === values.taskName);

    if (!selectedTask) {
      api.error({
        message: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∑–∞–¥–∞—á—É.",
      });
      return;
    }

    // üöÄ –î–æ–±–∞–≤–ª—è–µ–º Time_Norm –≤ –∑–∞–ø–∏—Å—å (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ –∏–ª–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫)
    const timeNorm = selectedTask?.Time_Norm || 0;

    const user = JSON.parse(localStorage.getItem("user") || "{}");
    const payload = {
      taskName: values.taskName,
      date: values.date.toISOString(),
      description: values.description,
      hours: parseFloat(totalHours.toFixed(2)),
      timeNorm,
      isCompleted: values.isCompleted,
      ID_User: user?.id,
      ID_Employee: user?.id,
      attachments:
        values.attachmentType === "file"
          ? editingFileList.map((f) => f.name) // –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ —Ñ–∞–π–ª—ã
          : [],
      link: values.attachmentType === "link" ? values.link : "",
    };

    const method = editingEntry ? "PUT" : "POST";
    const url = `${API_URL}/api/time-tracking${
      editingEntry ? `/${editingEntry.ID_Execution}` : ""
    }`;

    try {
      const res = await fetch(url, {
        method,
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(payload),
      });

      const text = await res.text();
      console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", text);

      if (!res.ok) {
        const errorText = await res.text();
        throw new Error(`–û—à–∏–±–∫–∞ ${res.status}: ${errorText}`);
      }

      api.success({
        message: editingEntry ? "–ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞" : "–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–æ",
      });

      await fetchTimeEntries(); // –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏
      form.resetFields(); // –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É
      setEditingEntry(null); // –°–±—Ä–æ—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      setIsModalVisible(false); // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª
    } catch (error: unknown) {
      if (error instanceof Error) {
        api.error({ message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ${error.message}` });
      } else {
        api.error({ message: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏" });
      }
    }
  };

  const fetchComments = async (taskId: string) => {
    try {
      const res = await fetch(`${API_URL}/api/comments/${taskId}`);
      const data = await res.json();
      setComments(data);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:", error);
    }
  };

  const handleAddComment = async () => {
    if (!newComment.trim() || !viewingEntry?.ID_Task) return;
  
    try {
      const token = localStorage.getItem("token");
      const res = await fetch(`${API_URL}/api/comments`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          taskId: viewingEntry.ID_Task,
          commentText: newComment.trim(),
        }),
      });
  
      if (!res.ok) throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è");
  
      await fetch(`${API_URL}/api/employee/notifications`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          userEmail: viewingEntry.Employee_Email, // ‚úÖ –¢–µ–ø–µ—Ä—å email
          title: `–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ: ${viewingEntry.Task_Name}`,
          description: newComment.trim(),
        }),
      });
      
  
      setNewComment("");
      fetchComments(viewingEntry.ID_Task);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:", error);
    }
  };
  

  const openCommentsModal = (entry: RawTimeEntry) => {
    setViewingEntry(entry);
    setIsCommentsModalVisible(true);
    fetchComments(entry.ID_Task);
  };

  const handleViewEntry = async (entry: RawTimeEntry) => {
    try {
      const res = await fetch(
        `${API_URL}/api/tasks/${entry.ID_Task}/attachments`
      );
      if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–ª–æ–∂–µ–Ω–∏–π: ${res.status}`);
      const data = await res.json();
      setViewingEntry({
        ...entry,
        Attachments: data.attachments || [],
        link: data.link || "", // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–µ link
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–ª–æ–∂–µ–Ω–∏–π:", error);
      setViewingEntry({ ...entry, Attachments: [], link: "" });
    } finally {
      setIsViewModalVisible(true);
    }
  };

  const getWeekDays = () =>
    Array.from({ length: 7 }, (_, i) => weekStart.add(i, "day"));

  const normFile = (e: { fileList: UploadFile[] }) =>
    Array.isArray(e) ? e : e.fileList;

  console.log("–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:", activeTasks);

  return (
    <App>
      {contextHolder}
      <Layout className="layout">
        <Sidebar role="employee" />
        <Layout className="main-layout">
          <HeaderEmployee />
          <Content className="content">
            <div className="page-content">
              <h1
                style={{
                  fontSize: "28px",
                  fontWeight: 600,
                  flexBasis: "100%",
                  marginTop: "32px", 
                  marginBottom: "24px",
                }}
              >
                –£—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏
              </h1>

              {/* üëâ –í–∫–ª–∞–¥–∫–∏ */}
              <Tabs
                defaultActiveKey="cards"
                type="card"
                items={[
                  {
                    key: "cards",
                    label: "–ö–∞—Ä—Ç–æ—á–∫–∏",
                    children: (
                      <>
                        {/* üëâ –§–∏–ª—å—Ç—Ä—ã –∏ –∫–Ω–æ–ø–∫–∏ */}
                        <div
        style={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
          flexWrap: "wrap",
          gap: "1rem",
          width: "100%",
          marginTop: "24px",       // —É–º–µ–Ω—å—à–∏–ª–∏ –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
          marginBottom: "24px",    // —É–º–µ–Ω—å—à–∏–ª–∏ –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É
        }}
      >
                          {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å ‚Äî –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
                          <Button
                            className="dark-action-button"
                            icon={<PlusOutlined style={{ color: "inherit" }} />}
                            onClick={() => {
                              form.resetFields();
                              setEditingEntry(null);
                              setIsModalVisible(true);
                            }}
                          >
                            –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                          </Button>

                          {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å ‚Äî —Ñ–∏–ª—å—Ç—Ä—ã –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è */}
                          <div
                            style={{
                              display: "flex",
                              alignItems: "center",
                              flexWrap: "wrap",
                              gap: "1rem",
                            }}
                          >
                            <Button
                              icon={<LeftOutlined />}
                              onClick={() =>
                                setWeekStart(weekStart.subtract(1, "week"))
                              }
                            />
                            <h2 style={{ margin: "0 1rem" }}>
                              {weekStart.format("D MMMM")} ‚Äì{" "}
                              {weekStart.add(6, "day").format("D MMMM YYYY")}
                            </h2>
                            <Button
                              icon={<RightOutlined />}
                              onClick={() =>
                                setWeekStart(weekStart.add(1, "week"))
                              }
                            />
                            <DatePicker
                              value={weekStart}
                              format="DD.MM.YYYY"
                              allowClear={false}
                              suffixIcon={<CalendarOutlined />}
                              style={{ marginLeft: 12 }}
                              inputReadOnly
                              onChange={(date) => {
                                if (date && dayjs.isDayjs(date)) {
                                  setWeekStart(date.startOf("isoWeek"));
                                }
                              }}
                              disabledDate={(current) =>
                                current &&
                                (current.year() < 2000 || current.year() > 2100)
                              }
                            />
                            <Dropdown
                              menu={{
                                items: [
                                  ...projects.map((p) => ({
                                    key: p.ID_Order,
                                    label: p.Order_Name,
                                    onClick: () =>
                                      setSelectedProjectId(p.ID_Order),
                                  })),
                                  { type: "divider" },
                                  {
                                    key: "reset",
                                    label: "–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä",
                                    onClick: () => setSelectedProjectId(null),
                                  },
                                ],
                              }}
                              placement="bottomRight"
                              arrow
                            >
                              <Button icon={<FilterOutlined />}>
                                {selectedProjectId
                                  ? projects.find(
                                      (p) => p.ID_Order === selectedProjectId
                                    )?.Order_Name
                                  : "–§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ–µ–∫—Ç—É"}
                              </Button>
                            </Dropdown>
                          </div>
                        </div>

                        {/* üëâ –ö–∞—Ä—Ç–æ—á–∫–∏ */}
                        <div className="horizontal-columns">
                          {getWeekDays().map((day) => (
                            <div
                              key={day.toString()}
                              className="horizontal-column"
                            >
                              <div className="day-header">
                                {weekDaysRu[day.isoWeekday() - 1]}
                              </div>
                              <div className="day-date">
                                {day.format("DD.MM")}
                              </div>
                              <div className="card-stack">
                                {getFilteredEntriesByDay(day).map((entry) => (
                                  <div
                                    key={entry.ID_Execution}
                                    className="entry-card"
                                  >
                                    <div>
                                      <b>{entry.Task_Name}</b>
                                      <div>–ü—Ä–æ–µ–∫—Ç: {entry.Order_Name}</div>
                                      <div>{entry.Hours_Spent} —á</div>
                                    </div>
                                    <div
                                      style={{
                                        marginTop: 8,
                                        display: "flex",
                                        justifyContent: "space-between",
                                        alignItems: "center",
                                        flexWrap: "wrap",
                                      }}
                                    >
                                      <div style={{ display: "flex", gap: 4 }}>
                                        <Tooltip title="–ü—Ä–æ—Å–º–æ—Ç—Ä">
                                          <Button
                                            size="small"
                                            icon={<EyeOutlined />}
                                            onClick={() =>
                                              handleViewEntry(entry)
                                            }
                                          />
                                        </Tooltip>
                                        <Tooltip title="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏">
                                          <Button
                                            size="small"
                                            icon={<MessageOutlined />}
                                            onClick={() =>
                                              openCommentsModal(entry)
                                            }
                                          />
                                        </Tooltip>
                                      </div>
                                      <div style={{ display: "flex", gap: 4 }}>
                                        <Tooltip title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                                          <Button
                                            size="small"
                                            icon={<EditOutlined />}
                                            onClick={() => handleEdit(entry)}
                                          />
                                        </Tooltip>
                                        <Tooltip title="–£–¥–∞–ª–∏—Ç—å">
                                          <Button
                                            size="small"
                                            icon={<DeleteOutlined />}
                                            danger
                                            onClick={() =>
                                              handleDelete(entry.ID_Execution)
                                            }
                                          />
                                        </Tooltip>
                                      </div>
                                    </div>
                                  </div>
                                ))}
                              </div>
                            </div>
                          ))}
                        </div>
                      </>
                    ),
                  },
                  {
                    key: "table",
                    label: "–¢–∞–±–ª–∏—Ü–∞",
                    children: (
                      <>
                        {/* üëâ –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å: –∫–Ω–æ–ø–∫–∞ + –ø–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ */}
                        <div
                          style={{
                            display: "flex",
                            justifyContent: "space-between",
                            alignItems: "center",
                            marginTop: "24px",       // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
                            marginBottom: "24px",    // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É
                          }}
                        >
                          {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å ‚Äî –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
                          <Button
                            className="dark-action-button"
                            icon={<PlusOutlined style={{ color: "inherit" }} />}
                            onClick={() => {
                              form.resetFields();
                              setEditingEntry(null);
                              setIsModalVisible(true);
                            }}
                          >
                            –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                          </Button>
                  
                          {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å ‚Äî –ø–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ */}
                          <Input
                            placeholder="–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤..."
                            value={searchQuery}
                            onChange={(e) => setSearchQuery(e.target.value)}
                            style={{ width: 250 }}
                          />
                        </div>
                  
                        {/* üëâ –¢–∞–±–ª–∏—Ü–∞ */}
                        <Table
                          dataSource={timeEntries.filter((entry) => {
                            const query = searchQuery.trim().toLowerCase();
                            return (
                              !query ||
                              entry.Task_Name.toLowerCase().includes(query) ||
                              entry.Order_Name.toLowerCase().includes(query)
                            );
                          })}
                          rowKey="ID_Execution"
                          pagination={{ pageSize: 10 }}
                          columns={[
                            {
                              title: "–ó–∞–¥–∞—á–∞",
                              dataIndex: "Task_Name",
                              key: "task",
                            },
                            {
                              title: "–ü—Ä–æ–µ–∫—Ç",
                              dataIndex: "Order_Name",
                              key: "order",
                            },
                            {
                              title: "–ù–∞—á–∞–ª–æ",
                              dataIndex: "Start_Date",
                              key: "start",
                              render: (date: string) =>
                                dayjs(date).format("DD.MM.YYYY HH:mm"),
                            },
                            {
                              title: "–û–∫–æ–Ω—á–∞–Ω–∏–µ",
                              dataIndex: "End_Date",
                              key: "end",
                              render: (date: string) =>
                                dayjs(date).format("DD.MM.YYYY HH:mm"),
                            },
                            {
                              title: "–ü–æ—Ç—Ä–∞—á–µ–Ω–æ (–∑–∞–ø–∏—Å—å)",
                              dataIndex: "Hours_Spent",
                              key: "hours",
                            },
                            {
                              title: "–ù–æ—Ä–º–∞ –≤—Ä–µ–º–µ–Ω–∏",
                              dataIndex: "Time_Norm",
                              key: "timeNorm",
                              render: (val: number | undefined) =>
                                val ? `${val} —á` : "-",
                            },
                            {
                              title: "–í–ª–æ–∂–∏–ª—Å—è –≤ –Ω–æ—Ä–º—É?",
                              dataIndex: "FitTimeNorm",
                              key: "fitTimeNorm",
                              render: (val: boolean | undefined) =>
                                val === undefined ? "-" : val ? "–î–∞" : "–ù–µ—Ç",
                            },
                            {
                              title: "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏",
                              dataIndex: "Is_Completed",
                              key: "isCompleted",
                              render: (val) => (val ? "–ó–∞–≤–µ—Ä—à–µ–Ω–∞" : "–ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"),
                            },
                          ]}
                        />
                      </>
                    ),
                  }
                  ,
                ]}
              />

              <Modal
                title={
                  editingEntry ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" : "–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"
                }
                open={isModalVisible}
                onCancel={() => setIsModalVisible(false)}
                footer={[
                  <Button key="cancel" onClick={() => setIsModalVisible(false)}>
                    –û—Ç–º–µ–Ω–∞
                  </Button>,
                  <Button
                    key="submit"
                    type="primary"
                    onClick={() => form.submit()}
                  >
                    {editingEntry ? "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" : "–î–æ–±–∞–≤–∏—Ç—å"}
                  </Button>,
                ]}
              >
                <Form form={form} layout="vertical" onFinish={handleFormSubmit}>
                  <Form.Item
                    name="taskName"
                    label="–ó–∞–¥–∞—á–∞"
                    rules={[{ required: true }]}
                  >
                    <Select
                      placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É"
                      onChange={(taskId) => {
                        const selectedTask = tasks.find(
                          (t) => t.ID_Task === taskId
                        );
                        form.setFieldsValue({
                          taskName: taskId,
                          project: selectedTask?.ID_Order,
                        });
                      }}
                    >
                      {tasks.map((t) => (
                        <Select.Option key={t.ID_Task} value={t.ID_Task}>
                          {t.Task_Name}
                        </Select.Option>
                      ))}
                    </Select>
                  </Form.Item>

                  <Form.Item name="description" label="–û–ø–∏—Å–∞–Ω–∏–µ">
                    <Input.TextArea />
                  </Form.Item>

                  <Form.Item label="–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏" required>
                    <div style={{ display: "flex", gap: "12px" }}>
                      <Form.Item
                        name="hours"
                        style={{ marginBottom: 0, flex: 1 }}
                        rules={[
                          {
                            required: true,
                            message: "–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—ã",
                          },
                          {
                            type: "number",
                            min: 0,
                            message: "–ß–∞—Å—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏",
                          },
                        ]}
                      >
                        <InputNumber
                          placeholder="–ß–∞—Å—ã"
                          min={0}
                          style={{ width: "100%" }}
                          className="time-input"
                        />
                      </Form.Item>

                      <Form.Item
                        name="minutes"
                        style={{ marginBottom: 0, flex: 1 }}
                        rules={[
                          {
                            required: true,
                            message: "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω—É—Ç—ã",
                          },
                          {
                            type: "number",
                            min: 0,
                            max: 59,
                            message: "–ú–∏–Ω—É—Ç—ã –æ—Ç 0 –¥–æ 59",
                          },
                        ]}
                      >
                        <InputNumber
                          placeholder="–ú–∏–Ω—É—Ç—ã"
                          min={0}
                          max={59}
                          style={{ width: "100%" }}
                          className="time-input"
                        />
                      </Form.Item>
                    </div>
                  </Form.Item>

                  <Form.Item
                    name="date"
                    label="–î–∞—Ç–∞"
                    rules={[{ required: true, message: "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É" }]}
                  >
                    <DatePicker
                      style={{ width: "100%" }}
                      disabledDate={(current) =>
                        current && current > dayjs().endOf("day")
                      }
                    />
                  </Form.Item>
                  <Form.Item
                    name="isCompleted"
                    label="–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞?"
                    valuePropName="checked"
                  >
                    <Checkbox>–î–∞</Checkbox>
                  </Form.Item>

                  <Form.Item label="–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞" required>
                    <Form.Item
                      name="attachmentType"
                      noStyle
                      initialValue="file"
                    >
                      <Radio.Group
                        optionType="button"
                        buttonStyle="solid"
                        className="attachment-type-switch"
                        style={{ marginBottom: 12 }}
                        onChange={(e) => {
                          const type = e.target.value;
                          if (type === "file") {
                            form.setFieldsValue({ link: "" });
                          } else {
                            setEditingFileList([]);
                            form.setFieldsValue({ file: [] });
                          }
                        }}
                      >
                        <Radio.Button value="file">–§–∞–π–ª</Radio.Button>
                        <Radio.Button value="link">–°—Å—ã–ª–∫–∞</Radio.Button>
                      </Radio.Group>
                    </Form.Item>

                    <Form.Item
                      noStyle
                      shouldUpdate={(prev, curr) =>
                        prev.attachmentType !== curr.attachmentType
                      }
                    >
                      {({ getFieldValue }) => {
                        const type = getFieldValue("attachmentType");
                        if (type === "file") {
                          return (
                            <Form.Item
                              name="file"
                              valuePropName="fileList"
                              getValueFromEvent={normFile}
                              className="attachment-upload"
                            >
                              <Upload
                                beforeUpload={() => false}
                                multiple
                                accept=".pdf,.doc,.docx,.png,.jpg"
                                fileList={editingFileList}
                                onChange={({ fileList }) =>
                                  setEditingFileList(fileList)
                                }
                              >
                                <Button icon={<InboxOutlined />}>
                                  –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã
                                </Button>
                              </Upload>
                            </Form.Item>
                          );
                        } else {
                          return (
                            <Form.Item
                              name="link"
                              className="attachment-link"
                              rules={[
                                { required: true, message: "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É" },
                                {
                                  type: "url",
                                  message: "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL",
                                },
                              ]}
                            >
                              <Input placeholder="https://example.com" />
                            </Form.Item>
                          );
                        }
                      }}
                    </Form.Item>
                  </Form.Item>
                </Form>
              </Modal>

              <Modal
                title="–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–∏"
                open={isViewModalVisible}
                onCancel={() => setIsViewModalVisible(false)}
                footer={
                  <Button onClick={() => setIsViewModalVisible(false)}>
                    –ó–∞–∫—Ä—ã—Ç—å
                  </Button>
                }
              >
                {viewingEntry && (
                  <div style={{ lineHeight: 1.8 }}>
                    <p>
                      <b>–ó–∞–¥–∞—á–∞:</b> {viewingEntry.Task_Name}
                    </p>
                    <p>
                      <b>–ü—Ä–æ–µ–∫—Ç:</b> {viewingEntry.Order_Name}
                    </p>
                    <p>
                      <b>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞:</b>{" "}
                      {dayjs(viewingEntry.Start_Date).format(
                        "DD.MM.YYYY HH:mm"
                      )}
                    </p>
                    <p>
                      <b>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b>{" "}
                      {dayjs(viewingEntry.End_Date).format("DD.MM.YYYY HH:mm")}
                    </p>
                    <p>
                      <b>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ (–∑–∞–ø–∏—Å—å):</b> {viewingEntry.Hours_Spent} —á
                    </p>

                    <p>
                      <b>–ù–æ—Ä–º–∞ –≤—Ä–µ–º–µ–Ω–∏:</b>{" "}
                      {viewingEntry.Time_Norm
                        ? `${viewingEntry.Time_Norm} —á`
                        : "-"}
                    </p>
                    <p>
                      <b>–í–ª–æ–∂–∏–ª—Å—è –≤ –Ω–æ—Ä–º—É:</b>{" "}
                      {viewingEntry.FitTimeNorm === undefined
                        ? "-"
                        : viewingEntry.FitTimeNorm
                        ? "–î–∞"
                        : "–ù–µ—Ç"}
                    </p>

                    {viewingEntry.Description && (
                      <p>
                        <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {viewingEntry.Description}
                      </p>
                    )}
                    {(viewingEntry.Attachments || []).length > 0 ||
                    viewingEntry.link ? (
                      <div>
                        <p>
                          <b>–í–ª–æ–∂–µ–Ω–∏—è:</b>
                        </p>
                        <ul className="attachments-list">
                          {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º Attachments */}
                          {(viewingEntry.Attachments || []).map((item, idx) => {
                            const isUrl = /^https?:\/\//.test(item);
                            const href = isUrl
                              ? item
                              : `${API_URL}/uploads/${item}`;
                            const label = isUrl ? item : item.split("/").pop();
                            return (
                              <li key={`file-${idx}`}>
                                <a
                                  href={href}
                                  target="_blank"
                                  rel="noopener noreferrer"
                                >
                                  {label}
                                </a>
                              </li>
                            );
                          })}

                          {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å */}
                          {viewingEntry.link && (
                            <li key="link">
                              <a
                                href={viewingEntry.link}
                                target="_blank"
                                rel="noopener noreferrer"
                              >
                                {viewingEntry.link}
                              </a>
                            </li>
                          )}
                        </ul>
                      </div>
                    ) : null}
                  </div>
                )}
              </Modal>

              <Modal
                title="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–¥–∞—á–µ"
                open={isCommentsModalVisible}
                onCancel={() => setIsCommentsModalVisible(false)}
                footer={null}
              >
                {viewingEntry && (
                  <>
                    <h3 style={{ marginTop: 0 }}>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</h3>
                    <List
                      className="comment-list"
                      header={`${comments.length} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤`}
                      itemLayout="horizontal"
                      dataSource={comments}
                      renderItem={(item: CommentType) => (
                        <List.Item>
                          <List.Item.Meta
                            avatar={
                              <Avatar
                                src={
                                  item.Avatar
                                    ? `${API_URL}/uploads/${item.Avatar}`
                                    : undefined
                                }
                                icon={
                                  !item.Avatar ? <UserOutlined /> : undefined
                                }
                                style={{
                                  backgroundColor: item.Avatar
                                    ? "transparent"
                                    : "#777",
                                }}
                              />
                            }
                            title={
                              <div
                                style={{
                                  display: "flex",
                                  justifyContent: "space-between",
                                }}
                              >
                                <span>{item.AuthorName}</span>
                                <span style={{ fontSize: 12, color: "#999" }}>
                                  {dayjs(item.Created_At).format(
                                    "YYYY-MM-DD HH:mm"
                                  )}
                                </span>
                              </div>
                            }
                            description={item.CommentText}
                          />
                        </List.Item>
                      )}
                    />
                    <Input.TextArea
                      rows={3}
                      value={newComment}
                      onChange={(e) => setNewComment(e.target.value)}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..."
                      style={{ marginTop: 8 }}
                    />
                    <Button
                      type="primary"
                      onClick={handleAddComment}
                      disabled={!newComment.trim()}
                      style={{ marginTop: 8 }}
                      block
                    >
                      –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                    </Button>
                  </>
                )}
              </Modal>
            </div>
          </Content>
        </Layout>
      </Layout>
    </App>
  );
};

export default TimeTrackingEmployee;
