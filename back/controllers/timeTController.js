const { sql, poolConnect, pool } = require("../config/db");
const { createNotification } = require("../services/notification.service");

// üîπ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
const createTimeEntry = async (req, res) => {
  const { taskName, description, hours, date, isCompleted, link, attachments } = req.body;

  try {
    await poolConnect;

    const tokenUser = req.user;
    if (!tokenUser?.id) {
      return res.status(401).json({ message: "Unauthorized" });
    }

    // 1. –ü–æ–ª—É—á–∏—Ç—å Time_Norm –∏–∑ Tasks
    const timeNormResult = await pool
      .request()
      .input("ID_Task", sql.Int, parseInt(taskName))
      .query(`
        SELECT Time_Norm 
        FROM Tasks 
        WHERE ID_Task = @ID_Task
      `);

    const timeNorm = timeNormResult.recordset[0]?.Time_Norm || null;

    // 2. –í—Å—Ç–∞–≤–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Execution (—Å OUTPUT)
    const insertResult = await pool
      .request()
      .input("ID_Task", sql.Int, parseInt(taskName))
      .input("ID_Employee", sql.Int, tokenUser.id)
      .input("Start_Date", sql.DateTime, new Date(date))
      .input("End_Date", sql.DateTime, new Date(date))
      .input("Description", sql.NVarChar(sql.MAX), description || "")
      .input("Hours_Spent", sql.Decimal(5, 2), hours)
      .input("Time_Norm", sql.Int, timeNorm)
      .input("Is_Completed", sql.Bit, isCompleted ? 1 : 0)
      .input("Link", sql.NVarChar(sql.MAX), link || null) // üî• –î–æ–±–∞–≤–∏–ª —Å—Å—ã–ª–∫—É
      .input("Attachments", sql.NVarChar(sql.MAX), attachments ? attachments.join(",") : null) // üî• –î–æ–±–∞–≤–∏–ª –≤–ª–æ–∂–µ–Ω–∏—è
      .query(`
        INSERT INTO Execution 
          (ID_Task, ID_Employee, Start_Date, End_Date, Description, Hours_Spent, Time_Norm, Is_Completed, Link, Attachments)
        OUTPUT INSERTED.*
        VALUES 
          (@ID_Task, @ID_Employee, @Start_Date, @End_Date, @Description, @Hours_Spent, @Time_Norm, @Is_Completed, @Link, @Attachments)
      `);

    const insertedRecord = insertResult.recordset[0];

    // 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ, –ø—Ä–æ–µ–∫—Ç–µ, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
    const infoResult = await pool
      .request()
      .input("ID_Task", sql.Int, taskName)
      .input("ID_User", sql.Int, tokenUser.id)
      .query(`
        SELECT 
          t.Task_Name,
          o.Order_Name,
          o.ID_Team,
          u.First_Name + ' ' + u.Last_Name AS EmployeeName
        FROM Tasks t
        JOIN Orders o ON t.ID_Order = o.ID_Order
        JOIN Users u ON u.ID_User = @ID_User
        WHERE t.ID_Task = @ID_Task
      `);

    const taskInfo = infoResult.recordset[0];

    // 4. –ü–æ–∏—Å–∫ email –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
    if (taskInfo) {
      const managerResult = await pool
        .request()
        .input("ID_Team", sql.Int, taskInfo.ID_Team)
        .query(`
          SELECT TOP 1 u.Email
          FROM TeamMembers tm
          JOIN Users u ON tm.ID_User = u.ID_User
          WHERE tm.ID_Team = @ID_Team AND u.ID_Role IN (
            SELECT ID_Role FROM Roles WHERE Role_Name LIKE N'%–º–µ–Ω–µ–¥–∂–µ—Ä%'
          )
        `);

      const managerEmail = managerResult.recordset[0]?.Email;
      if (managerEmail) {
        await createNotification({
          userEmail: managerEmail,
          title: "–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –≤—Ä–µ–º–µ–Ω–∏",
          description: `–°–æ—Ç—Ä—É–¥–Ω–∏–∫ ${taskInfo.EmployeeName} –¥–æ–±–∞–≤–∏–ª –≤—Ä–µ–º—è –∫ –∑–∞–¥–∞—á–µ "${taskInfo.Task_Name}".`,
        });
      }
    }

    res.status(201).json({
      message: "–í—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–æ",
      timeEntry: insertedRecord,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

const updateTimeEntry = async (req, res) => {
  const { id } = req.params;
  const { taskName, description, hours, date, link, attachments } = req.body;

  try {
    await poolConnect;

    const tokenUser = req.user;
    if (!tokenUser?.id) {
      return res.status(401).json({ message: "Unauthorized" });
    }

    await pool
      .request()
      .input("ID_Execution", sql.Int, id)
      .input("ID_Task", sql.Int, parseInt(taskName))
      .input("Start_Date", sql.DateTime, new Date(date))
      .input("End_Date", sql.DateTime, new Date(date))
      .input("Description", sql.NVarChar(sql.MAX), description || "")
      .input("Hours_Spent", sql.Decimal(5, 2), hours)
      .input("Link", sql.NVarChar(sql.MAX), link || null)
      .input("Attachments", sql.NVarChar(sql.MAX), attachments ? attachments.join(",") : null)
      .query(`
        UPDATE Execution
        SET ID_Task = @ID_Task,
            Start_Date = @Start_Date,
            End_Date = @End_Date,
            Description = @Description,
            Hours_Spent = @Hours_Spent,
            Link = @Link,
            Attachments = @Attachments
        WHERE ID_Execution = @ID_Execution AND ID_Employee = ${tokenUser.id}
      `);

    res.status(200).json({ message: "–ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};


// üîπ –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
const deleteTimeEntry = async (req, res) => {
  const { id } = req.params;

  try {
    await poolConnect;

    const tokenUser = req.user;
    if (!tokenUser?.id) {
      return res.status(401).json({ message: "Unauthorized" });
    }

    await pool
      .request()
      .input("ID_Execution", sql.Int, id)
      .input("ID_Employee", sql.Int, tokenUser.id).query(`
        DELETE FROM Execution WHERE ID_Execution = @ID_Execution AND ID_Employee = @ID_Employee
      `);

    res.status(200).json({ message: "–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

const getTimeEntries = async (req, res) => {
  try {
    const userId = req.user?.id;
    const userRole = req.user?.role;

    console.log("üëâ userId:", userId, "üëâ userRole:", userRole);

    if (!userId) {
      return res.status(401).json({ message: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" });
    }

    await poolConnect;

    let query = `
      SELECT 
        e.ID_Execution,
        e.ID_Task,
        t.Task_Name,
        o.Order_Name,
        e.Start_Date,
        e.End_Date,
        e.Hours_Spent,
        e.Description,
        e.Is_Completed,
        e.ID_Employee,
        e.Attachments,
        e.Link,
        t.Time_Norm,
        u.First_Name + ' ' + u.Last_Name AS Employee_Name,
        tms.Team_Name,
        (
          SELECT SUM(e2.Hours_Spent)
          FROM Execution e2
          WHERE e2.ID_Task = e.ID_Task 
            AND e2.ID_Employee = e.ID_Employee 
            AND e2.Is_Completed = 1
        ) AS Hours_Spent_Total,
        CASE 
          WHEN t.Time_Norm IS NOT NULL AND
               (
                 SELECT SUM(e2.Hours_Spent)
                 FROM Execution e2
                 WHERE e2.ID_Task = e.ID_Task 
                   AND e2.ID_Employee = e.ID_Employee
               ) <= t.Time_Norm THEN 1
          ELSE 0
        END AS FitTimeNorm
      FROM Execution e
      JOIN Tasks t ON e.ID_Task = t.ID_Task
      JOIN Orders o ON t.ID_Order = o.ID_Order
      JOIN Users u ON e.ID_Employee = u.ID_User
      LEFT JOIN TeamMembers tm ON u.ID_User = tm.ID_User
      LEFT JOIN Teams tms ON tm.ID_Team = tms.ID_Team
    `;

    if (userRole !== "–º–µ–Ω–µ–¥–∂–µ—Ä") {
      query += ` WHERE e.ID_Employee = @ID_User`;
    }

    const result = await pool
      .request()
      .input("ID_User", sql.Int, userId)
      .query(query);

    const timeEntries = result.recordset.map((row) => ({
      ...row,
      Attachments: row.Attachments ? row.Attachments.split(",") : [],
    }));

    res.status(200).json(timeEntries);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

const getAllTimeEntries = async (req, res) => {
  try {
    await poolConnect;
    const tokenUser = req.user;
    if (!tokenUser?.id || (tokenUser.role || '').toLowerCase() !== '–º–µ–Ω–µ–¥–∂–µ—Ä') {
      return res.status(403).json({ message: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω" });
    }
    const result = await pool.request().query(`
      SELECT 
        e.ID_Execution,
        e.ID_Task,
        e.ID_Employee AS ID_User,
        t.Task_Name,
        o.Order_Name,
        e.Start_Date,
        e.End_Date,
        e.Hours_Spent,
        e.Description,
        e.Attachments,
        e.Link,
        e.Is_Completed,
        u.First_Name + ' ' + u.Last_Name AS Employee_Name,
        tms.Team_Name,
        t.Time_Norm,  -- –¥–æ–±–∞–≤–ª—è–µ–º!
        CASE 
          WHEN t.Time_Norm IS NOT NULL AND
               (
                 SELECT SUM(e2.Hours_Spent)
                 FROM Execution e2
                 WHERE e2.ID_Task = e.ID_Task 
                   AND e2.ID_Employee = e.ID_Employee
               ) <= t.Time_Norm THEN 1
          ELSE 0
        END AS FitTimeNorm
      FROM Execution e
      JOIN Tasks t ON e.ID_Task = t.ID_Task
      JOIN Orders o ON t.ID_Order = o.ID_Order
      JOIN Users u ON e.ID_Employee = u.ID_User
      LEFT JOIN TeamMembers tm ON u.ID_User = tm.ID_User
      LEFT JOIN Teams tms ON tm.ID_Team = tms.ID_Team
      ORDER BY e.Start_Date DESC
    `);
    
    
    const records = result.recordset.map((entry) => ({
      ...entry,
      Attachments: entry.Attachments
        ? entry.Attachments.split(",").map((s) => s.trim())
        : [],
      Time_Norm: entry.Time_Norm,  // –¥–æ–±–∞–≤–ª–µ–Ω–æ!
      FitTimeNorm: entry.FitTimeNorm === 1  // –ø—Ä–∏–≤–æ–¥–∏–º –∫ boolean
    }));
    

    res.status(200).json(records);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};



module.exports = {
  createTimeEntry,
  updateTimeEntry,
  deleteTimeEntry,
  getTimeEntries,
  getAllTimeEntries  
};