const { sql, poolConnect, pool } = require('../config/db');

// üîπ –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ email

const getNotifications = async (req, res) => {
  try {
    await poolConnect;
    const email = req.query.employeeEmail;

    if (!email) {
      return res.status(400).json({ message: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }
    const result = await pool.request()
    .input('Email', sql.NVarChar, email)
    .query(`
      SELECT 
        ID_Notification AS id, 
        Title AS title, 
        Description AS description, 
        Link,            -- üü¢ –¥–æ–±–∞–≤–ª—è–µ–º Link
        Created_At,
        Is_Read AS isRead
      FROM Notifications
      WHERE UserEmail = @Email
      ORDER BY Created_At DESC
    `);
  
  
    res.status(200).json(result.recordset);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' });
  }
};

// üîπ –£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ ID
const deleteNotificationById = async (req, res) => {
  try {
    await poolConnect;
    const id = parseInt(req.params.id, 10);

    if (isNaN(id)) {
      return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' });
    }

    const result = await pool
      .request()
      .input('ID', sql.Int, id)
      .query('DELETE FROM Notifications WHERE ID_Notification = @ID');

    if (result.rowsAffected[0] === 0) {
      return res.status(404).json({ message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    res.status(200).json({ message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' });
  }
};

// üîπ –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
// üîπ –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
const createNotification = async (req, res) => {
  try {
    await poolConnect;
    const { userEmail, title, description, link } = req.body;

    if (!userEmail || !title || !description) {
      return res.status(400).json({ message: "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –≤—Å–µ –ø–æ–ª—è: userEmail, title, description" });
    }

    await pool.request()
      .input('UserEmail', sql.NVarChar, userEmail)
      .input('Title', sql.NVarChar, title)
      .input('Description', sql.NVarChar, description)
      .input('Link', sql.NVarChar, link || null)
      .query(`
        INSERT INTO Notifications (UserEmail, Title, Description, Link, Created_At)
        VALUES (@UserEmail, @Title, @Description, @Link, GETDATE())
      `);

    res.status(201).json({ message: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ" });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" });
  }
};


// üîπ –ü–æ–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
const markNotificationAsRead = async (req, res) => {
  try {
    await poolConnect;
    const id = parseInt(req.params.id, 10);

    if (isNaN(id)) {
      return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' });
    }

    await pool
      .request()
      .input('ID', sql.Int, id)
      .query(`
        UPDATE Notifications
        SET Is_Read = 1
        WHERE ID_Notification = @ID
      `);

    res.status(200).json({ message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' });
  }
};
const getManagerNotifications = async (req, res) => {
  try {
    await poolConnect;
    const email = req.query.managerEmail;

    if (!email) {
      return res.status(400).json({ message: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    const result = await pool.request()
    .input('Email', sql.NVarChar, email)
    .query(`
      SELECT 
        ID_Notification AS id, 
        Title AS title, 
        Description AS description, 
        Link,
        Created_At,
        Is_Read AS isRead
      FROM Notifications
      WHERE UserEmail = @Email
      ORDER BY Created_At DESC
    `);

    res.status(200).json(result.recordset);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' });
  }
};

module.exports = {
  getNotifications,
  getManagerNotifications, 
  deleteNotificationById,
  createNotification,
  markNotificationAsRead
};