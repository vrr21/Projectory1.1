const db = require("../config/db");
const { notifyProjectAssignment } = require('../services/notification.service');
const authMiddleware = require('../middleware/authMiddleware');


// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å ID_Manager
// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å ID_Manager
exports.getAllProjects = async (req, res) => {
  try {
    const result = await db.pool
      .request()
      .query(`
        SELECT 
  o.ID_Order, 
  o.Order_Name, 
  pt.Type_Name, 
  o.Creation_Date, 
  o.End_Date,
  o.Status,
  ISNULL(o.ID_Team, 0) AS ID_Team,
  ISNULL(t.Team_Name, '–ù–µ—Ç –∫–æ–º–∞–Ω–¥—ã') AS Team_Name,
  ISNULL(o.ID_Manager, 0) AS ID_Manager
FROM Orders o
LEFT JOIN ProjectTypes pt ON o.ID_ProjectType = pt.ID_ProjectType
LEFT JOIN Teams t ON o.ID_Team = t.ID_Team;

      `);

    res.json(result.recordset); // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø–æ–ª—è
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤' });
  }
};


exports.createProject = async (req, res) => {
  const { Order_Name, Type_Name, Creation_Date, End_Date } = req.body;
  const ID_Manager = req.body.ID_Manager || req.user?.id; // üëà –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞

  try {
    const typeResult = await db.pool
      .request()
      .input("Type_Name", db.sql.NVarChar, Type_Name)
      .query("SELECT ID_ProjectType FROM ProjectTypes WHERE Type_Name = @Type_Name");

    if (typeResult.recordset.length === 0) {
      return res.status(400).json({ error: "–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const typeId = typeResult.recordset[0].ID_ProjectType;

    await db.pool
      .request()
      .input("Order_Name", db.sql.NVarChar, Order_Name)
      .input("ID_ProjectType", db.sql.Int, typeId)
      .input("Creation_Date", db.sql.Date, Creation_Date)
      .input("End_Date", db.sql.Date, End_Date)
      .input("Status", db.sql.NVarChar, "–ù–æ–≤–∞—è")
      .input("ID_Manager", db.sql.Int, ID_Manager)
      .query(`
        INSERT INTO Orders (Order_Name, ID_ProjectType, Creation_Date, End_Date, Status, ID_Manager)
        VALUES (@Order_Name, @ID_ProjectType, @Creation_Date, @End_Date, @Status, @ID_Manager)
      `);

    res.status(201).json({ message: "–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞" });
  }
};


// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
exports.closeProject = async (req, res) => {
  const { id } = req.params;

  try {
    await db.pool
      .request()
      .input("ID_Order", db.sql.Int, id)
      .query("UPDATE Orders SET Status = '–ó–∞–≤–µ—Ä—à—ë–Ω' WHERE ID_Order = @ID_Order");

    res.status(200).json({ message: "–ü—Ä–æ–µ–∫—Ç –∑–∞–∫—Ä—ã—Ç" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞" });
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
exports.updateProject = async (req, res) => {
  const projectId = req.params.id;
  const { Order_Name, Type_Name, Creation_Date, End_Date } = req.body;

  try {
    const typeResult = await db.pool
      .request()
      .input("Type_Name", db.sql.NVarChar, Type_Name)
      .query("SELECT ID_ProjectType FROM ProjectTypes WHERE Type_Name = @Type_Name");

    if (typeResult.recordset.length === 0) {
      return res.status(400).json({ error: "–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const typeId = typeResult.recordset[0].ID_ProjectType;

    await db.pool
      .request()
      .input("ID_Order", db.sql.Int, projectId)
      .input("Order_Name", db.sql.NVarChar, Order_Name)
      .input("ID_ProjectType", db.sql.Int, typeId)
      .input("Creation_Date", db.sql.Date, Creation_Date)
      .input("End_Date", db.sql.Date, End_Date)
      .query(`
        UPDATE Orders
        SET Order_Name = @Order_Name,
            ID_ProjectType = @ID_ProjectType,
            Creation_Date = @Creation_Date,
            End_Date = @End_Date
        WHERE ID_Order = @ID_Order
      `);

    res.json({ message: "–ü—Ä–æ–µ–∫—Ç –æ–±–Ω–æ–≤–ª—ë–Ω" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞" });
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
exports.deleteProject = async (req, res) => {
  const projectId = req.params.id;

  try {
    await db.pool
      .request()
      .input("ID_Order", db.sql.Int, projectId)
      .query("DELETE FROM Orders WHERE ID_Order = @ID_Order");

    res.json({ message: "–ü—Ä–æ–µ–∫—Ç —É–¥–∞–ª—ë–Ω" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞" });
  }
};

exports.assignEmployeeToProject = async (req, res) => {
  const { ID_Order, employeeIds = [] } = req.body;

  if (!ID_Order || !Array.isArray(employeeIds) || employeeIds.length === 0) {
    return res.status(400).json({ message: 'ID –ø—Ä–æ–µ–∫—Ç–∞ –∏ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  try {
    await poolConnect;

    const projectResult = await pool.request()
      .input('ID_Order', sql.Int, ID_Order)
      .query('SELECT Order_Name FROM Orders WHERE ID_Order = @ID_Order');

    if (!projectResult.recordset.length) {
      return res.status(404).json({ message: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const projectName = projectResult.recordset[0].Order_Name;

    for (const empId of employeeIds) {
      await pool.request()
        .input('ID_Order', sql.Int, ID_Order)
        .input('ID_Employee', sql.Int, empId)
        .query(`
          INSERT INTO ProjectAssignments (ID_Order, ID_Employee)
          VALUES (@ID_Order, @ID_Employee)
        `);

      console.log(`üì® –ù–∞–∑–Ω–∞—á–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ ${empId} –Ω–∞ –ø—Ä–æ–µ–∫—Ç "${projectName}"`);

      await notifyProjectAssignment(empId, projectName); // ‚úÖ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    }

    res.status(200).json({ message: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø—Ä–æ–µ–∫—Ç –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ –ø—Ä–æ–µ–∫—Ç:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤' });
  }
};