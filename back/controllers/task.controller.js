const { pool, sql, poolConnect } = require("../config/db");

exports.getProjects = async (req, res) => {
  const { teamId } = req.query;

  try {
    await poolConnect;
    const request = pool.request();

    if (!teamId) {
      return res.status(400).json({ message: "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä teamId" });
    }

    request.input("TeamID", sql.Int, parseInt(teamId, 10));
    const result = await request.query(`
      SELECT ID_Order, Order_Name, Status
      FROM Orders
      WHERE ID_Team = @TeamID AND Status != '–ó–∞–∫—Ä—ã—Ç'
    `);

    res.status(200).json(result.recordset);
  } catch (error) {
    console.error("üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:", error);
    res
      .status(500)
      .json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤", error: error.message });
  }
};

exports.getAllTasks = async (req, res) => {
  const { employee, team } = req.query;

  try {
    await poolConnect;
    const request = pool.request();
    if (employee) request.input("EmployeeID", sql.Int, parseInt(employee));
    if (team) request.input("TeamID", sql.Int, parseInt(team));

    const result = await request.query(`
SELECT 
  t.ID_Task,
  t.Task_Name,
  t.Description,
  t.Time_Norm,
  t.Deadline,
  TRIM(s.Status_Name) as Status_Name,
  o.Order_Name,
  t.ID_Order,       
  tm.Team_Name,
  a.ID_Employee AS Assigned_Employee_Id,
  u.ID_User,
  u.First_Name + ' ' + u.Last_Name AS Employee_Name,
  u.Avatar
FROM Tasks t


      LEFT JOIN Assignment a ON a.ID_Task = t.ID_Task
      INNER JOIN Statuses s ON t.ID_Status = s.ID_Status
LEFT JOIN Orders o ON t.ID_Order = o.ID_Order
LEFT JOIN Teams tm ON o.ID_Team = tm.ID_Team

      LEFT JOIN Users u ON a.ID_Employee = u.ID_User
      WHERE s.Status_Name != '–ê—Ä—Ö–∏–≤'
    `);

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á
    const tasksMap = {};

    result.recordset.forEach((row) => {
      const taskId = row.ID_Task;

      if (!tasksMap[taskId]) {
        tasksMap[taskId] = {
          ID_Task: row.ID_Task,
          Task_Name: row.Task_Name,
          Description: row.Description,
          Time_Norm: row.Time_Norm,
          Deadline: row.Deadline,
          Status_Name: row.Status_Name,
          Order_Name: row.Order_Name,
          ID_Order: row.ID_Order, // üõ†Ô∏è –î–û–ë–ê–í–¨ –≠–¢–£ –°–¢–†–û–ö–£
          Team_Name: row.Team_Name,
          Assigned_Employee_Id: row.Assigned_Employee_Id,
          Employees: [],
        };
      }

      if (!tasksMap[taskId].AlsoAssignedEmployees) {
        tasksMap[taskId].AlsoAssignedEmployees = [];
      }
      if (row.ID_User && row.Employee_Name) {
        tasksMap[taskId].Employees.push({
          ID_Employee: row.ID_User,
          ID_User: row.ID_User,
          Full_Name: row.Employee_Name,
          Avatar: row.Avatar ?? null,
        });
      }
    });

    // üü¢ –ù–æ–≤—ã–π –±–ª–æ–∫: –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ Assignment –ø–æ —Å–≤—è–∑—è–º Parent_Task_Id
    // —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –∫—Ç–æ –µ—â—ë –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞ —ç—Ç—É –∑–∞–¥–∞—á—É
    const additionalAssignments = await pool.request().query(`
      SELECT 
        a.ID_Task,
        a2.ID_Task AS Parent_Task_Id,
        a2.ID_Employee AS Additional_Employee_Id,
        u2.ID_User,
        u2.First_Name + ' ' + u2.Last_Name AS Additional_Employee_Name,
        u2.Avatar AS Additional_Employee_Avatar
      FROM Assignment a
      INNER JOIN Tasks t ON t.ID_Task = a.ID_Task
      LEFT JOIN Tasks t_parent ON t.ID_Task = t_parent.ID_Task
      LEFT JOIN Assignment a2 ON a2.ID_Task = t_parent.ID_Task OR a2.ID_Task = t.ID_Task
      LEFT JOIN Users u2 ON a2.ID_Employee = u2.ID_User
      WHERE a2.ID_Employee IS NOT NULL
    `);

    additionalAssignments.recordset.forEach((row) => {
      const taskId = row.ID_Task;
      const task = tasksMap[taskId];
      if (task && row.ID_User) {
        const alreadyExists = task.Employees.some(
          (emp) => emp.ID_Employee === row.ID_User
        );
        if (!alreadyExists) {
          task.Employees.push({
            ID_Employee: row.ID_User,
            Full_Name: row.Additional_Employee_Name,
            Avatar: row.Additional_Employee_Avatar ?? null,
          });
        }
      }
    });

    const tasks = Object.values(tasksMap);

    res.status(200).json(tasks);
  } catch (error) {
    console.error("üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á:", error);
    res.status(500).json({
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á",
      error: error.message,
    });
  }
};

// üîπ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –∑–∞–ø–∏—Å—å—é –≤ Execution
exports.createTask = async (req, res) => {
  const {
    Task_Name,
    Description,
    Time_Norm,
    ID_Order,
    Deadline,
    Employee_Names = [],
    ID_Manager: providedManager,
  } = req.body;

  let ID_Manager = providedManager;

  try {
    await poolConnect;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –∑–∞–¥–∞—á–∏ –≤ —Ç–æ–º –∂–µ –∑–∞–∫–∞–∑–µ
    const duplicateResult = await pool
      .request()
      .input("Task_Name", sql.NVarChar, Task_Name)
      .input("ID_Order", sql.Int, ID_Order)
      .query(`
        SELECT COUNT(*) as DuplicateCount
        FROM Tasks
        WHERE Task_Name = @Task_Name AND ID_Order = @ID_Order
      `);

    if (duplicateResult.recordset[0].DuplicateCount > 0) {
      return res.status(400).json({
        message: `–ó–∞–¥–∞—á–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "${Task_Name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ`,
      });
    }

    // –ù–∞–π—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
    if (!ID_Manager && ID_Order) {
      const managerResult = await pool
        .request()
        .input("ID_Order", sql.Int, ID_Order)
        .query("SELECT ID_Manager FROM Orders WHERE ID_Order = @ID_Order");
      if (managerResult.recordset.length) {
        ID_Manager = managerResult.recordset[0].ID_Manager;
      }
    }

    if (!ID_Manager) {
      return res
        .status(400)
        .json({ message: "ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏" });
    }

    // –°—Ç–∞—Ç—É—Å "–ù–æ–≤–∞—è"
    const statusResult = await pool
      .request()
      .input("Status_Name", sql.NVarChar, "–ù–æ–≤–∞—è")
      .query("SELECT ID_Status FROM Statuses WHERE Status_Name = @Status_Name");

    if (!statusResult.recordset.length) {
      return res.status(400).json({ message: '–°—Ç–∞—Ç—É—Å "–ù–æ–≤–∞—è" –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const resolvedStatusId = statusResult.recordset[0].ID_Status;

    // –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –∑–∞–¥–∞—á–∏
    const mainTaskResult = await pool
      .request()
      .input("Task_Name", sql.NVarChar, Task_Name)
      .input("Description", sql.NVarChar, Description)
      .input("Time_Norm", sql.Int, Time_Norm)
      .input("ID_Status", sql.Int, resolvedStatusId)
      .input("ID_Order", sql.Int, ID_Order)
      .input(
        "Deadline",
        sql.DateTime,
        Deadline
          ? new Date(Deadline)
          : new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)
      )
      .input("ID_Manager", sql.Int, ID_Manager)
      .query(`
        INSERT INTO Tasks 
          (Task_Name, Description, Time_Norm, ID_Status, ID_Order, Deadline, ID_Manager)
        OUTPUT INSERTED.ID_Task
        VALUES 
          (@Task_Name, @Description, @Time_Norm, @ID_Status, @ID_Order, @Deadline, @ID_Manager)
      `);

    const parentTaskId = mainTaskResult.recordset[0].ID_Task;

    for (const name of Employee_Names) {
      const [First_Name, Last_Name] = name.split(" ");
      const userResult = await pool
        .request()
        .input("First_Name", sql.NVarChar, First_Name)
        .input("Last_Name", sql.NVarChar, Last_Name)
        .query(`
          SELECT ID_User, Email
          FROM Users
          WHERE First_Name = @First_Name AND Last_Name = @Last_Name
        `);

      if (userResult.recordset.length) {
        const { ID_User, Email } = userResult.recordset[0];

        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        const taskResult = await pool
          .request()
          .input("Task_Name", sql.NVarChar, Task_Name)
          .input("Description", sql.NVarChar, Description)
          .input("Time_Norm", sql.Int, Time_Norm)
          .input("ID_Status", sql.Int, resolvedStatusId)
          .input("ID_Order", sql.Int, ID_Order)
          .input(
            "Deadline",
            sql.DateTime,
            Deadline
              ? new Date(Deadline)
              : new Date(Date.now() + 7 * 24 * 60 * 60 * 1000)
          )
          .input("ID_Manager", sql.Int, ID_Manager)
          .input("Parent_Task_ID", sql.Int, parentTaskId)
          .query(`
            INSERT INTO Tasks 
              (Task_Name, Description, Time_Norm, ID_Status, ID_Order, Deadline, ID_Manager, Parent_Task_ID)
            OUTPUT INSERTED.ID_Task
            VALUES 
              (@Task_Name, @Description, @Time_Norm, @ID_Status, @ID_Order, @Deadline, @ID_Manager, @Parent_Task_ID)
          `);

        const childTaskId = taskResult.recordset[0].ID_Task;

        // –ó–∞–ø–∏—Å—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        await pool
          .request()
          .input("ID_Task", sql.Int, childTaskId)
          .input("ID_Employee", sql.Int, ID_User)
          .input("Assignment_Date", sql.Date, new Date())
          .input("ID_Status", sql.Int, resolvedStatusId)
          .query(`
            INSERT INTO Assignment 
              (ID_Task, ID_Employee, Assignment_Date, ID_Status)
            VALUES 
              (@ID_Task, @ID_Employee, @Assignment_Date, @ID_Status)
          `);

        // –°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await pool
          .request()
          .input("Title", sql.NVarChar, "–ù–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞")
          .input("Description", sql.NVarChar, `–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞ "${Task_Name}"`)
          .input("UserEmail", sql.NVarChar, Email)
          .query(`
            INSERT INTO Notifications 
              (Title, Description, UserEmail)
            VALUES 
              (@Title, @Description, @UserEmail)
          `);
      }
    }

    res.status(201).json({ message: "–ó–∞–¥–∞—á–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã" });
  } catch (error) {
    console.error("üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", error);
    res.status(500).json({
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏",
      error: error.message,
    });
  }
};

// üîπ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —É–±–∏—Ä–∞–µ–º –≤—ã–∑–æ–≤ DELETE –ø–æ id=unassigned (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id)
exports.deleteTask = async (req, res) => {
  const { id } = req.params;

  if (!/^\d+$/.test(id)) {
    console.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏:", id);
    return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏" });
  }

  const taskId = parseInt(id, 10);

  try {
    await poolConnect;

    // –£–¥–∞–ª–∏—Ç—å –∏–∑ Execution
    await pool
      .request()
      .input("ID_Task", sql.Int, taskId)
      .query("DELETE FROM Execution WHERE ID_Task = @ID_Task");

    // –£–¥–∞–ª–∏—Ç—å –∏–∑ Assignment
    await pool
      .request()
      .input("ID_Task", sql.Int, taskId)
      .query("DELETE FROM Assignment WHERE ID_Task = @ID_Task");

    // –£–¥–∞–ª–∏—Ç—å –∏–∑ Tasks
    await pool
      .request()
      .input("ID_Task", sql.Int, taskId)
      .query("DELETE FROM Tasks WHERE ID_Task = @ID_Task");

    res.status(200).json({ message: "–ó–∞–¥–∞—á–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —É–¥–∞–ª–µ–Ω—ã" });
  } catch (error) {
    console.error("üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", error);
    res
      .status(500)
      .json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏", error: error.message });
  }
};
exports.getTasksByEmployee = async (req, res) => {
  const { id } = req.params;
  const employeeId = parseInt(id, 10);

  if (!employeeId || isNaN(employeeId)) {
    console.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", id);
    return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞" });
  }

  try {
    await poolConnect;

    // 1. –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å: –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    const result = await pool.request().input("ID_User", sql.Int, employeeId)
      .query(`
        SELECT 
          t.ID_Task,
          t.Parent_Task_ID,
          t.Task_Name,
          t.Description,
          s.Status_Name,
          o.Order_Name,
          tm.Team_Name,
          t.Time_Norm,
          t.Deadline,
          u.ID_User AS EmployeeId,
          u.First_Name + ' ' + u.Last_Name AS EmployeeName,
          u.Avatar
        FROM Assignment a
        INNER JOIN Tasks t ON a.ID_Task = t.ID_Task
        INNER JOIN Statuses s ON t.ID_Status = s.ID_Status
        INNER JOIN Orders o ON t.ID_Order = o.ID_Order
        INNER JOIN Teams tm ON o.ID_Team = tm.ID_Team
        LEFT JOIN Users u ON a.ID_Employee = u.ID_User
        WHERE a.ID_Employee = @ID_User
      `);

    const tasks = [];

    for (const task of result.recordset) {
      const parentId = task.Parent_Task_ID || task.ID_Task;
      // 2. –ù–∞–π—Ç–∏ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å —Ç–∞–∫–∏–º Parent_Task_ID
      const alsoAssignedResult = await pool
        .request()
        .input("ParentID", sql.Int, parentId)
        .input("ID_User", sql.Int, employeeId) // üî• –î–û–ë–ê–í–õ–ï–ù–û!
        .query(`
    SELECT DISTINCT u.ID_User, u.First_Name + ' ' + u.Last_Name AS EmployeeName, u.Avatar
    FROM Tasks t
    INNER JOIN Assignment a ON t.ID_Task = a.ID_Task
    INNER JOIN Users u ON a.ID_Employee = u.ID_User
    WHERE (t.Parent_Task_ID = @ParentID OR t.ID_Task = @ParentID)
    AND u.ID_User != @ID_User
  `);

      // –°–æ–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á—É
      tasks.push({
        ...task,
        AlsoAssignedEmployees: alsoAssignedResult.recordset,
      });
    }

    res.status(200).json(tasks);
  } catch (error) {
    console.error("üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", error);
    res
      .status(500)
      .json({
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
        error: error.message,
      });
  }
};

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á —Å –¥–µ—Ç–∞–ª—è–º–∏
exports.getTasksWithDetails = async (req, res) => {
  try {
    await poolConnect;

    const result = await pool.request().query(`
      SELECT 
        t.ID_Task,
        t.Task_Name,
        t.Description,
        t.Time_Norm,
        t.Deadline,
        s.Status_Name,
        o.Order_Name,
        o.ID_Order,
        tm.Team_Name,
        (
          SELECT ISNULL(SUM(e.Hours_Spent), 0)
          FROM Execution e
          WHERE e.ID_Task = t.ID_Task
        ) AS Hours_Spent_Total,  -- ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ
        (
          SELECT TOP 1 a1.ID_Employee
          FROM Assignment a1
          WHERE a1.ID_Task = t.ID_Task
          ORDER BY a1.ID_Employee ASC
        ) AS Assigned_Employee_Id,
        u.ID_User,
        u.First_Name + ' ' + u.Last_Name AS Employee_Name,
        u.Avatar
      FROM Tasks t
      LEFT JOIN Statuses s ON t.ID_Status = s.ID_Status
      LEFT JOIN Orders o ON t.ID_Order = o.ID_Order
      LEFT JOIN Teams tm ON o.ID_Team = tm.ID_Team
      LEFT JOIN Assignment a ON a.ID_Task = t.ID_Task
      LEFT JOIN Users u ON a.ID_Employee = u.ID_User
    `);

    const tasks = Object.values(
      result.recordset.reduce((acc, row) => {
        if (!acc[row.ID_Task]) {
          acc[row.ID_Task] = {
            ID_Task: row.ID_Task,
            Task_Name: row.Task_Name,
            Description: row.Description,
            Time_Norm: row.Time_Norm,
            Hours_Spent_Total: row.Hours_Spent_Total, // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ
            Deadline: row.Deadline,
            Status_Name: row.Status_Name,
            Order_Name: row.Order_Name,
            ID_Order: row.ID_Order,
            Team_Name: row.Team_Name,
            Assigned_Employee_Id: row.Assigned_Employee_Id,
            Employees: [],
          };
        }
        if (row.ID_User && row.Employee_Name) {
          acc[row.ID_Task].Employees.push({
            ID_Employee: row.ID_User,
            Full_Name: row.Employee_Name,
            Avatar: row.Avatar ?? null,
          });
        }
        return acc;
      }, {})
    );

    res.json(tasks);
  } catch (error) {
    console.error("üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á —Å –¥–µ—Ç–∞–ª—è–º–∏:", error);
    res
      .status(500)
      .json({
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á —Å –¥–µ—Ç–∞–ª—è–º–∏",
        error: error.message,
      });
  }
};

// üîπ –ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–¥–∞—á–∏
exports.closeTask = async (req, res) => {
  const { id } = req.params;

  try {
    await poolConnect;

    // –ü–æ–ª—É—á–∏—Ç—å ID —Å—Ç–∞—Ç—É—Å–∞ "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"
    const statusResult = await pool
      .request()
      .input("Status_Name", sql.NVarChar, "–ó–∞–≤–µ—Ä—à–µ–Ω–∞")
      .query("SELECT ID_Status FROM Statuses WHERE Status_Name = @Status_Name");

    if (!statusResult.recordset.length) {
      return res.status(400).json({ message: '–°—Ç–∞—Ç—É—Å "–ó–∞–≤–µ—Ä—à–µ–Ω–∞" –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const completedStatusId = statusResult.recordset[0].ID_Status;

    // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É, —É—Å—Ç–∞–Ω–æ–≤–∏–≤ —Å—Ç–∞—Ç—É—Å "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"
    await pool
      .request()
      .input("ID_Task", sql.Int, id)
      .input("ID_Status", sql.Int, completedStatusId)
      .query(
        "UPDATE Tasks SET ID_Status = @ID_Status WHERE ID_Task = @ID_Task"
      );

    res.status(200).json({ message: "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞" });
  } catch (error) {
    console.error("üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞–¥–∞—á–∏:", error);
    res
      .status(500)
      .json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–∞–¥–∞—á–∏", error: error.message });
  }
};

exports.updateEmployeeTaskStatus = async (req, res) => {
  const { taskId } = req.params;
  const { employeeId, statusName } = req.body;

  if (!employeeId || !statusName) {
    return res.status(400).json({ message: 'employeeId –∏ statusName –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  try {
    await poolConnect;

    // 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç–∞—Ç—É—Å–∞
    const statusResult = await pool.request()
      .input('StatusName', sql.NVarChar, statusName)
      .query('SELECT ID_Status FROM Statuses WHERE Status_Name = @StatusName');

    if (statusResult.recordset.length === 0) {
      return res.status(404).json({ message: `–°—Ç–∞—Ç—É—Å "${statusName}" –Ω–µ –Ω–∞–π–¥–µ–Ω` });
    }

    const statusId = statusResult.recordset[0].ID_Status;

    // 2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏
    const taskResult = await pool.request()
      .input('ID_Task', sql.Int, taskId)
      .query('SELECT Deadline, ID_Status, Parent_Task_ID FROM Tasks WHERE ID_Task = @ID_Task');

    if (!taskResult.recordset.length) {
      return res.status(404).json({ message: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    const { Deadline, Parent_Task_ID } = taskResult.recordset[0];
    const isOverdue = new Date(Deadline) < new Date();

    // 3Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º ID "–í—ã–ø–æ–ª–Ω–µ–Ω–∞"
    const completedResult = await pool.request()
      .input('StatusName', sql.NVarChar, '–í—ã–ø–æ–ª–Ω–µ–Ω–∞')
      .query('SELECT ID_Status FROM Statuses WHERE Status_Name = @StatusName');
    const completedId = completedResult.recordset[0]?.ID_Status;

    // 4Ô∏è‚É£ –ï—Å–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ, —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ "–í—ã–ø–æ–ª–Ω–µ–Ω–∞"
    if (isOverdue && statusId !== completedId) {
      return res.status(403).json({
        message: `–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å "${statusName}", —Ç.–∫. –∑–∞–¥–∞—á–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞. –†–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ "–í—ã–ø–æ–ª–Ω–µ–Ω–∞".`
      });
    }

    // 5Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Assignment
    await pool.request()
      .input('ID_Task', sql.Int, taskId)
      .input('ID_Employee', sql.Int, employeeId)
      .input('ID_Status', sql.Int, statusId)
      .query(`
        UPDATE Assignment
        SET ID_Status = @ID_Status
        WHERE ID_Task = @ID_Task AND ID_Employee = @ID_Employee
      `);

    // 6Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
    await pool.request()
      .input('ID_Task', sql.Int, taskId)
      .input('ID_Status', sql.Int, statusId)
      .query(`
        UPDATE Tasks
        SET ID_Status = @ID_Status, OverdueCompleted = 0, Status_Updated_At = GETDATE()
        WHERE ID_Task = @ID_Task
      `);

    // 7Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
    if (Parent_Task_ID) {
      await pool.request()
        .input('ID_Task', sql.Int, Parent_Task_ID)
        .input('ID_Status', sql.Int, statusId)
        .query(`
          UPDATE Tasks
          SET ID_Status = @ID_Status, OverdueCompleted = 0, Status_Updated_At = GETDATE()
          WHERE ID_Task = @ID_Task
        `);
    }

    res.status(200).json({ message: `–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ "${statusName}"` });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.message });
  }
};


// –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
const deleteArchivedTasks = async (req, res) => {
  try {
    await Task.destroy({ where: { Archive: true } });
    res.status(200).json({ message: "–ê—Ä—Ö–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã" });
  } catch (error) {
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á" });
  }
};

exports.deleteAllArchivedTasks = async (req, res) => {
  try {
    await poolConnect;

    // –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å—Ç–∞—Ç—É—Å–∞ "–ê—Ä—Ö–∏–≤"
    const statusResult = await pool
      .request()
      .input("Status_Name", sql.NVarChar, "–ê—Ä—Ö–∏–≤")
      .query("SELECT ID_Status FROM Statuses WHERE Status_Name = @Status_Name");

    if (!statusResult.recordset.length) {
      return res.status(404).json({ message: '–°—Ç–∞—Ç—É—Å "–ê—Ä—Ö–∏–≤" –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const archiveStatusId = statusResult.recordset[0].ID_Status;

    // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ Assignment
    await pool
      .request()
      .input("ID_Status", sql.Int, archiveStatusId)
      .query(
        "DELETE FROM Assignment WHERE ID_Task IN (SELECT ID_Task FROM Tasks WHERE ID_Status = @ID_Status)"
      );

    // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ Tasks
    await pool
      .request()
      .input("ID_Status", sql.Int, archiveStatusId)
      .query("DELETE FROM Tasks WHERE ID_Status = @ID_Status");

    res.status(200).json({ message: "–í—Å–µ –∞—Ä—Ö–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ —É–¥–∞–ª–µ–Ω—ã" });
  } catch (error) {
    console.error("üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:", error);
    res
      .status(500)
      .json({
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á",
        error: error.message,
      });
  }
};


exports.updateTask = async (req, res) => {
  const { id } = req.params;
  const {
    Task_Name,
    Description,
    Time_Norm,
    ID_Order,
    Deadline,
    ID_Status
  } = req.body;

  try {
    await poolConnect;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (
      !Task_Name ||
      !Description ||
      Time_Norm === undefined ||
      !ID_Order ||
      !Deadline ||
      !ID_Status
    ) {
      return res.status(400).json({ message: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    // 1Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    const currentTaskResult = await pool
      .request()
      .input("ID_Task", sql.Int, id)
      .query(`
        SELECT Task_Name 
        FROM Tasks 
        WHERE ID_Task = @ID_Task
      `);

    if (!currentTaskResult.recordset.length) {
      return res.status(404).json({ message: "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    }

    const currentTaskName = currentTaskResult.recordset[0].Task_Name;

    // 2Ô∏è‚É£ –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
    if (currentTaskName !== Task_Name) {
      const duplicateCheck = await pool
        .request()
        .input("Task_Name", sql.NVarChar, Task_Name)
        .input("ID_Order", sql.Int, ID_Order)
        .input("ID_Task", sql.Int, id)
        .query(`
          SELECT COUNT(*) as DuplicateCount
          FROM Tasks
          WHERE Task_Name = @Task_Name 
            AND ID_Order = @ID_Order 
            AND ID_Task != @ID_Task
        `);

      if (duplicateCheck.recordset[0].DuplicateCount > 0) {
        return res.status(400).json({
          message: `–ó–∞–¥–∞—á–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "${Task_Name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ`
        });
      }
    }

    // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –¥–∞—Ç—ã
    const parsedDeadline = new Date(Deadline);
    if (isNaN(parsedDeadline.getTime())) {
      return res.status(400).json({ message: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–µ–¥–ª–∞–π–Ω–∞" });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ ID —Å—Ç–∞—Ç—É—Å–∞
    const statusCheck = await pool
      .request()
      .input("ID_Status", sql.Int, ID_Status)
      .query(`
        SELECT ID_Status 
        FROM Statuses 
        WHERE ID_Status = @ID_Status
      `);
    if (!statusCheck.recordset.length) {
      return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID —Å—Ç–∞—Ç—É—Å–∞" });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
    await pool
      .request()
      .input("ID_Task", sql.Int, id)
      .input("Task_Name", sql.NVarChar, Task_Name)
      .input("Description", sql.NVarChar, Description)
      .input("Time_Norm", sql.Int, Time_Norm)
      .input("ID_Order", sql.Int, ID_Order)
      .input("Deadline", sql.DateTime, parsedDeadline)
      .input("ID_Status", sql.Int, ID_Status)
      .query(`
        UPDATE Tasks
        SET 
          Task_Name = @Task_Name,
          Description = @Description,
          Time_Norm = @Time_Norm,
          ID_Order = @ID_Order,
          Deadline = @Deadline,
          ID_Status = @ID_Status
        WHERE ID_Task = @ID_Task
      `);

    res.status(200).json({ message: `–ó–∞–¥–∞—á–∞ ${id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞` });
  } catch (error) {
    console.error("üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", error);
    res.status(500).json({
      message: `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ ${id} –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π`,
      error: error.message
    });
  }
};

// üîπ –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á–∏ –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
exports.deleteUnassignedTasks = async (req, res) => {
  try {
    await poolConnect;

    // –ù–∞–π—Ç–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    const result = await pool.request().query(`
      SELECT t.ID_Task
      FROM Tasks t
      LEFT JOIN Assignment a ON t.ID_Task = a.ID_Task
      WHERE a.ID_Employee IS NULL
    `);

    const taskIds = result.recordset.map((row) => row.ID_Task);

    if (taskIds.length === 0) {
      return res.status(200).json({ message: "–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è" });
    }

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (Execution)
    await pool.request().query(`
      DELETE FROM Execution WHERE ID_Task IN (${taskIds.join(",")})
    `);

    // –£–¥–∞–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    await pool.request().query(`
      DELETE FROM Assignment WHERE ID_Task IN (${taskIds.join(",")})
    `);

    // –£–¥–∞–ª—è–µ–º —Å–∞–º–∏ –∑–∞–¥–∞—á–∏
    await pool.request().query(`
      DELETE FROM Tasks WHERE ID_Task IN (${taskIds.join(",")})
    `);

    res.status(200).json({ message: "–ó–∞–¥–∞—á–∏ –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω—ã" });
  } catch (error) {
    console.error("üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:", error);
    res
      .status(500)
      .json({
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è",
        error: error.message,
      });
  }
};

exports.getTaskById = async (req, res) => {
  const { id } = req.params;

  try {
    await pool.connect();

    // 1. –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É
    const taskResult = await pool.request().input("ID_Task", sql.Int, id)
      .query(`
        SELECT 
          t.ID_Task,
          t.Task_Name,
          t.Description,
          t.Time_Norm,
          t.Deadline,
          s.Status_Name,
          o.Order_Name,
          o.ID_Order,
          tm.Team_Name
        FROM Tasks t
        LEFT JOIN Statuses s ON t.ID_Status = s.ID_Status
        LEFT JOIN Orders o ON t.ID_Order = o.ID_Order
        LEFT JOIN Teams tm ON o.ID_Team = tm.ID_Team
        WHERE t.ID_Task = @ID_Task
      `);

    if (!taskResult.recordset.length) {
      return res.status(404).json({ message: "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
    }

    const task = taskResult.recordset[0];

    // 2. –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–æ—Å–Ω–æ–≤–Ω–æ–≥–æ)
    const assignedResult = await pool.request().input("ID_Task", sql.Int, id)
      .query(`
        SELECT TOP 1 a.ID_Employee 
        FROM Assignment a
        WHERE a.ID_Task = @ID_Task
        ORDER BY a.ID_Employee ASC
      `);

    const assignedEmployeeId = assignedResult.recordset[0]?.ID_Employee || null;

    // 3. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    const employeesResult = await pool.request().input("ID_Task", sql.Int, id)
      .query(`
        SELECT 
          u.ID_User,
          u.First_Name,
          u.Last_Name,
          u.Avatar
        FROM Assignment a
        INNER JOIN Users u ON a.ID_Employee = u.ID_User
        WHERE a.ID_Task = @ID_Task
      `);

    const employees = employeesResult.recordset.map((emp) => ({
      ID_Employee: emp.ID_User,
      Full_Name: `${emp.First_Name} ${emp.Last_Name}`,
      Avatar: emp.Avatar,
    }));

    // 4. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–¥–∞—á—É
    res.json({
      ...task,
      Assigned_Employee_Id: assignedEmployeeId,
      Employees: employees,
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", error);
    res
      .status(500)
      .json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏", error: error.message });
  }
};

exports.getAllArchivedTasks = async (req, res) => {
  try {
    await poolConnect;

    const result = await pool.request().query(`
      SELECT 
        t.ID_Task,
        t.Task_Name,
        t.Description,
        t.Time_Norm,
        t.Deadline,
        s.Status_Name,
        o.Order_Name,
        o.ID_Order,
        tm.Team_Name,
        (
          SELECT TOP 1 a1.ID_Employee
          FROM Assignment a1
          WHERE a1.ID_Task = t.ID_Task
          ORDER BY a1.ID_Employee ASC
        ) AS Assigned_Employee_Id,
        u.ID_User,
        u.First_Name + ' ' + u.Last_Name AS Employee_Name,
        u.Avatar
      FROM Tasks t
      LEFT JOIN Statuses s ON t.ID_Status = s.ID_Status
      LEFT JOIN Orders o ON t.ID_Order = o.ID_Order
      LEFT JOIN Teams tm ON o.ID_Team = tm.ID_Team
      LEFT JOIN Assignment a ON a.ID_Task = t.ID_Task
      LEFT JOIN Users u ON a.ID_Employee = u.ID_User
      WHERE s.Status_Name = '–ê—Ä—Ö–∏–≤'
    `);
    

    const tasksMap = {};

    result.recordset.forEach((row) => {
      const taskId = row.ID_Task;

      if (!tasksMap[taskId]) {
        tasksMap[taskId] = {
          ID_Task: row.ID_Task,
          Task_Name: row.Task_Name,
          Description: row.Description,
          Time_Norm: row.Time_Norm,
          Deadline: row.Deadline,
          Status_Name: row.Status_Name,
          Order_Name: row.Order_Name,
          Team_Name: row.Team_Name,
          Assigned_Employee_Id: row.Assigned_Employee_Id,
          Employees: [],
        };
      }

      if (row.ID_User && row.Employee_Name) {
        tasksMap[taskId].Employees.push({
          ID_Employee: row.ID_User,
          Full_Name: row.Employee_Name,
          Avatar: row.Avatar ?? null,
        });
      }
    });

    const archivedTasks = Object.values(tasksMap);
    res.status(200).json(archivedTasks);
  } catch (error) {
    console.error("üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:", error);
    res
      .status(500)
      .json({
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á",
        error: error.message,
      });
  }
};

exports.archiveTask = async (req, res) => {
  const { id } = req.params;

  try {
    await poolConnect;

    // –ü–æ–ª—É—á–∏—Ç—å ID —Å—Ç–∞—Ç—É—Å–∞ "–ê—Ä—Ö–∏–≤"
    const statusResult = await pool
      .request()
      .input("Status_Name", sql.NVarChar, "–ê—Ä—Ö–∏–≤")
      .query("SELECT ID_Status FROM Statuses WHERE Status_Name = @Status_Name");

    if (!statusResult.recordset.length) {
      return res.status(400).json({ message: '–°—Ç–∞—Ç—É—Å "–ê—Ä—Ö–∏–≤" –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const archiveStatusId = statusResult.recordset[0].ID_Status;

    // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ Tasks
    await pool
      .request()
      .input("ID_Task", sql.Int, id)
      .input("ID_Status", sql.Int, archiveStatusId)
      .query(
        "UPDATE Tasks SET ID_Status = @ID_Status WHERE ID_Task = @ID_Task"
      );

    // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ Assignment –¥–ª—è –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    await pool
      .request()
      .input("ID_Task", sql.Int, id)
      .input("ID_Status", sql.Int, archiveStatusId)
      .query(
        "UPDATE Assignment SET ID_Status = @ID_Status WHERE ID_Task = @ID_Task"
      );

    res.status(200).json({ message: `–ó–∞–¥–∞—á–∞ ${id} –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤` });
  } catch (error) {
    console.error("üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–¥–∞—á–∏ –≤ –∞—Ä—Ö–∏–≤:", error);
    res
      .status(500)
      .json({
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ –∑–∞–¥–∞—á–∏ –≤ –∞—Ä—Ö–∏–≤",
        error: error.message,
      });
  }
};

// üîπ –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏—Ö
exports.checkAndUpdateOverdueTasks = async (req, res) => {
  try {
    await poolConnect;

    // 1. –ü–æ–ª—É—á–∏—Ç—å ID —Å—Ç–∞—Ç—É—Å–∞ "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"
    const statusResult = await pool
      .request()
      .input("Status_Name", sql.NVarChar, "–ó–∞–≤–µ—Ä—à–µ–Ω–∞").query(`
        SELECT ID_Status 
        FROM Statuses 
        WHERE Status_Name = @Status_Name
      `);

    if (!statusResult.recordset.length) {
      return res.status(400).json({ message: '–°—Ç–∞—Ç—É—Å "–ó–∞–≤–µ—Ä—à–µ–Ω–∞" –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const completedStatusId = statusResult.recordset[0].ID_Status;

    // 2. –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á–∏ —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º
    await pool.request().input("ID_Status", sql.Int, completedStatusId).query(`
       UPDATE Tasks
SET ID_Status = @ID_Status,
    OverdueCompleted = 1
WHERE Deadline < GETDATE()
  AND ID_Status NOT IN (
    SELECT ID_Status 
    FROM Statuses 
    WHERE Status_Name IN ('–ó–∞–≤–µ—Ä—à–µ–Ω–∞', '–í—ã–ø–æ–ª–Ω–µ–Ω–∞', '–ê—Ä—Ö–∏–≤')
  )
  AND (OverdueCompleted IS NULL OR OverdueCompleted = 0)

      `);

    res
      .status(200)
      .json({
        message:
          "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ—Å—Ä–æ—á–∫–µ.",
      });
  } catch (error) {
    console.error("üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:", error);
    res
      .status(500)
      .json({
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á",
        error: error.message,
      });
  }
};

exports.updateTaskStatus = async (req, res) => {
  const { id } = req.params;
  const { statusName } = req.body;

  if (!statusName) {
    return res.status(400).json({ message: "statusName –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
  }

  try {
    await poolConnect;

    const statusResult = await pool
      .request()
      .input("Status_Name", sql.NVarChar, statusName)
      .query("SELECT ID_Status FROM Statuses WHERE Status_Name = @Status_Name");

    if (!statusResult.recordset.length) {
      return res.status(400).json({ message: "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å" });
    }

    const statusId = statusResult.recordset[0].ID_Status;

    // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    await pool
      .request()
      .input("ID_Task", sql.Int, id)
      .input("ID_Status", sql.Int, statusId)
      .query(
        "UPDATE Tasks SET ID_Status = @ID_Status, OverdueCompleted = 0 WHERE ID_Task = @ID_Task"
      );

    res.status(200).json({ message: "–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª—ë–Ω" });
  } catch (error) {
    console.error("üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏:", error);
    res
      .status(500)
      .json({
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏",
        error: error.message,
      });
  }
};


module.exports = {
  getAllTasks: exports.getAllTasks,
  createTask: exports.createTask,
  deleteTask: exports.deleteTask,
  getTasksByEmployee: exports.getTasksByEmployee,
  getTasksWithDetails: exports.getTasksWithDetails,
  getTaskById: exports.getTaskById,
  closeTask: exports.closeTask,
  updateEmployeeTaskStatus: exports.updateEmployeeTaskStatus,
  deleteAllArchivedTasks: exports.deleteAllArchivedTasks,
  updateTask: exports.updateTask,
  getProjects: exports.getProjects,
  deleteUnassignedTasks: exports.deleteUnassignedTasks,
  archiveTask: exports.archiveTask,
  getAllArchivedTasks: exports.getAllArchivedTasks,
  checkAndUpdateOverdueTasks: exports.checkAndUpdateOverdueTasks,
  updateTaskStatus: exports.updateTaskStatus,
};
