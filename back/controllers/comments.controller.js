const { pool, sql } = require('../config/db');
const { createNotification } = require('../services/notification.service');

exports.getCommentsByTask = async (req, res) => {
  const { taskId } = req.params;
  const { entityType = 'task' } = req.query; // <- –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'task'

  try {
    const poolConn = await pool.connect();
    const result = await poolConn.request()
      .input('taskId', sql.Int, taskId)
      .input('entityType', sql.NVarChar(50), entityType)
      .query(`
SELECT 
  c.ID_Comment,
  c.ID_User,                                -- <--- –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ!
  REPLACE(REPLACE(REPLACE(c.CommentText, CHAR(13) + CHAR(10), ' '), CHAR(13), ' '), CHAR(10), ' ') AS CommentText,
  c.Created_At,
  u.First_Name + ' ' + u.Last_Name AS AuthorName,
  u.Avatar
FROM TaskComments c
JOIN Users u ON c.ID_User = u.ID_User
WHERE c.ID_Task = @taskId AND c.EntityType = @entityType
ORDER BY c.Created_At ASC

      `);

    res.status(200).json(result.recordset);
  } catch (err) {
    console.error('getCommentsByTask error:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤' });
  }
};

exports.addComment = async (req, res) => {
  const { taskId, commentText, entityType = 'task' } = req.body;
  const userId = req.user?.id;

  if (!taskId || !commentText || !userId) {
    return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  try {
    const cleanedCommentText = commentText.replace(/(\r\n|\n|\r)/g, ' ').trim();
    const poolConn = await pool.connect();

    // üìù –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    await poolConn.request()
      .input('taskId', sql.Int, taskId)
      .input('userId', sql.Int, userId)
      .input('commentText', sql.NVarChar(sql.MAX), cleanedCommentText)
      .input('entityType', sql.NVarChar(50), entityType)
      .query(`
        INSERT INTO TaskComments (ID_Task, ID_User, CommentText, EntityType)
        VALUES (@taskId, @userId, @commentText, @entityType)
      `);

    // üî• –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ –æ –∑–∞–¥–∞—á–µ
    let taskInfo;
    if (entityType === 'task') {
      const result = await poolConn.request()
        .input('taskId', sql.Int, taskId)
        .query(`
          SELECT 
            o.ID_Team,
            t.Task_Name,
            u.Email AS EmployeeEmail
          FROM Tasks t
          JOIN Orders o ON t.ID_Order = o.ID_Order
          JOIN Execution e ON t.ID_Task = e.ID_Task
          JOIN Users u ON e.ID_Employee = u.ID_User
          WHERE t.ID_Task = @taskId
        `);
      taskInfo = result.recordset[0];
    }

    if (taskInfo) {
      const { Task_Name, EmployeeEmail } = taskInfo;

      // üî∏ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–ù–ï –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ –∫–æ–º–∞–Ω–¥–µ)
      const managersRes = await poolConn.request()
        .query(`
          SELECT u.Email
          FROM Users u
          JOIN Roles r ON u.ID_Role = r.ID_Role
          WHERE r.Role_Name LIKE N'%–º–µ–Ω–µ–¥–∂–µ—Ä%'
        `);

      const managerEmails = managersRes.recordset.map(r => r.Email);

      // üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–∞
      const userRoleRes = await poolConn.request()
        .input('UserId', sql.Int, userId)
        .query(`
          SELECT r.Role_Name 
          FROM Users u
          JOIN Roles r ON u.ID_Role = r.ID_Role
          WHERE u.ID_User = @UserId
        `);

      const userRole = userRoleRes.recordset[0]?.Role_Name?.toLowerCase();

      // üîó –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É
      const taskLink = `/tasks/${taskId}#comments`;

      // üîî –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if (userRole && userRole.includes('–º–µ–Ω–µ–¥–∂–µ—Ä') && EmployeeEmail) {
        await createNotification({
          userEmail: EmployeeEmail,
          title: `–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ: ${Task_Name}`,
          description: cleanedCommentText,
          link: taskLink
        });
      }

      for (const managerEmail of managerEmails) {
        if (managerEmail) {
          await createNotification({
            userEmail: managerEmail,
            title: `–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ: ${Task_Name}`,
            description: cleanedCommentText,
            link: taskLink
          });
        }
      }
    }

    res.status(201).json({ message: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω' });
  } catch (err) {
    console.error('addComment error:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è' });
  }
};

exports.updateComment = async (req, res) => {
  const { id } = req.params;
  const { commentText } = req.body;
  const userId = req.user?.id;
  const userRole = req.user?.role?.toLowerCase();

  if (!commentText || !userId) {
    return res.status(400).json({ error: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' });
  }

  try {
    const cleanedCommentText = commentText.replace(/(\r\n|\n|\r)/g, ' ').trim();
    const poolConn = await pool.connect();
    let result;

    if (userRole && userRole.includes('–º–µ–Ω–µ–¥–∂–µ—Ä')) {
      result = await poolConn.request()
        .input('id', sql.Int, id)
        .input('commentText', sql.NVarChar(sql.MAX), cleanedCommentText)
        .query(`
          UPDATE TaskComments
          SET CommentText = @commentText
          WHERE ID_Comment = @id
        `);
    } else {
      result = await poolConn.request()
        .input('id', sql.Int, id)
        .input('userId', sql.Int, userId)
        .input('commentText', sql.NVarChar(sql.MAX), cleanedCommentText)
        .query(`
          UPDATE TaskComments
          SET CommentText = @commentText
          WHERE ID_Comment = @id AND ID_User = @userId
        `);
    }

    if (result.rowsAffected[0] === 0) {
      return res.status(403).json({ error: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è' });
    }

    res.status(200).json({ message: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω' });
  } catch (err) {
    console.error('updateComment error:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è' });
  }
};


exports.deleteComment = async (req, res) => {
  const { id } = req.params;
  const userId = req.user?.id;
  const userRole = req.user?.role?.toLowerCase();

  if (!userId) {
    return res.status(401).json({ error: '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
  }

  try {
    const poolConn = await pool.connect();
    let result;

    if (userRole && userRole.includes('–º–µ–Ω–µ–¥–∂–µ—Ä')) {
      result = await poolConn.request()
        .input('id', sql.Int, id)
        .query(`
          DELETE FROM TaskComments
          WHERE ID_Comment = @id
        `);
    } else {
      result = await poolConn.request()
        .input('id', sql.Int, id)
        .input('userId', sql.Int, userId)
        .query(`
          DELETE FROM TaskComments
          WHERE ID_Comment = @id AND ID_User = @userId
        `);
    }

    if (result.rowsAffected[0] === 0) {
      return res.status(403).json({ error: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è' });
    }

    res.status(200).json({ message: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–¥–∞–ª–µ–Ω' });
  } catch (err) {
    console.error('deleteComment error:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è' });
  }
};


exports.getExecutionComments = async (req, res) => {
  const { executionId } = req.params;
  try {
    const poolConn = await pool.connect();
    const result = await poolConn.request()
      .input('executionId', sql.Int, executionId)
      .query(`
        SELECT 
          ec.ID_Comment,
          ec.ID_User,  -- üî• –î–æ–±–∞–≤–ª—è–µ–º ID_User!
          ec.CommentText,
          ec.Created_At,
          u.First_Name + ' ' + u.Last_Name AS AuthorName,
          u.Avatar
        FROM ExecutionComments ec
        JOIN Users u ON ec.ID_User = u.ID_User
        WHERE ec.ID_Execution = @executionId
        ORDER BY ec.Created_At ASC
      `);

    res.status(200).json(result.recordset);
  } catch (err) {
    console.error('getExecutionComments error:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤' });
  }
};



exports.addExecutionComment = async (req, res) => {
  const { executionId, commentText } = req.body;
  const userId = req.user?.id;

  if (!executionId || !commentText || !userId) {
    return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  try {
    const cleanedCommentText = commentText.replace(/(\r\n|\n|\r)/g, ' ').trim();

    const poolConn = await pool.connect();
    await poolConn.request()
      .input('executionId', sql.Int, executionId)
      .input('userId', sql.Int, userId)
      .input('commentText', sql.NVarChar(sql.MAX), cleanedCommentText)
      .query(`
        INSERT INTO ExecutionComments (ID_Execution, ID_User, CommentText)
        VALUES (@executionId, @userId, @commentText)
      `);

    // üêû –î–æ–±–∞–≤–∏–º –ª–æ–≥
    console.log("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:", { executionId, userId, commentText });

    res.status(201).json({ message: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω' });
  } catch (err) {
    console.error('addExecutionComment error:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è' });
  }
};



// –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ –∑–∞–¥–∞—á–µ
exports.deleteCommentsByTask = async (req, res) => {
  const { taskId } = req.params;

  try {
    const poolConn = await pool.connect();
    await poolConn.request()
      .input('taskId', sql.Int, taskId)
      .query('DELETE FROM TaskComments WHERE ID_Task = @taskId');

    res.status(200).json({ message: '–í—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–¥–∞—á–µ —É–¥–∞–ª–µ–Ω—ã' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ –∑–∞–¥–∞—á–µ:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ –∑–∞–¥–∞—á–µ' });
  }
};


exports.updateExecutionComment = async (req, res) => {
  const { id } = req.params;
  const { commentText } = req.body;
  const userId = req.user?.id;

  if (!commentText || !userId) {
    return res.status(400).json({ error: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' });
  }

  try {
    const cleanedCommentText = commentText.replace(/(\r\n|\n|\r)/g, ' ').trim();
    const poolConn = await pool.connect();

    const result = await poolConn.request()
      .input('id', sql.Int, id)
      .input('userId', sql.Int, userId)
      .input('commentText', sql.NVarChar(sql.MAX), cleanedCommentText)
      .query(`
        UPDATE ExecutionComments
        SET CommentText = @commentText
        WHERE ID_Comment = @id AND ID_User = @userId
      `);

    res.status(200).json({ message: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω' });
  } catch (err) {
    console.error('updateExecutionComment error:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è' });
  }
};

exports.deleteExecutionComment = async (req, res) => {
  const { id } = req.params;
  const userId = req.user?.id;

  if (!userId) {
    return res.status(401).json({ error: '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
  }

  try {
    const poolConn = await pool.connect();

    const result = await poolConn.request()
      .input('id', sql.Int, id)
      .input('userId', sql.Int, userId)
      .query(`
        DELETE FROM ExecutionComments
        WHERE ID_Comment = @id AND ID_User = @userId
      `);

    res.status(200).json({ message: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–¥–∞–ª–µ–Ω' });
  } catch (err) {
    console.error('deleteExecutionComment error:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è' });
  }
};
