const { pool, poolConnect } = require('../config/db');
const sql = require('mssql');
const excelJS = require('exceljs');
// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
const getAllTeams = async (req, res) => {
  try {
    await poolConnect;
    const result = await pool.request().query(`
      SELECT t.ID_Team AS id, t.Team_Name AS name, t.Status,
             u.ID_User AS userId, u.First_Name + ' ' + u.Last_Name AS fullName, u.Email,
             tm.Role
      FROM Teams t
      LEFT JOIN TeamMembers tm ON t.ID_Team = tm.ID_Team
      LEFT JOIN Users u ON tm.ID_User = u.ID_User
    `);

    const teamMap = {};
    for (const row of result.recordset) {
      if (!teamMap[row.id]) {
        teamMap[row.id] = {
          ID_Team: row.id,
          Team_Name: row.name,
          Status: row.Status,
          members: [],
        };
      }
      if (row.userId) {
        teamMap[row.id].members.push({
          ID_User: row.userId,
          fullName: row.fullName,
          email: row.Email,
          role: row.Role || '',
        });
        
      }
    }

    res.json(Object.values(teamMap));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥' });
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
const teamExistsByName = async (teamName, excludeId = null) => {
  const request = pool.request().input('Team_Name', sql.NVarChar, teamName.trim());
  if (excludeId) {
    request.input('ID_Team', excludeId);
  }
  const query = excludeId
    ? 'SELECT 1 FROM Teams WHERE Team_Name = @Team_Name AND ID_Team != @ID_Team'
    : 'SELECT 1 FROM Teams WHERE Team_Name = @Team_Name';
  const result = await request.query(query);
  return result.recordset.length > 0;
};

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
const createTeam = async (req, res) => {
  try {
    await poolConnect;
    const { Team_Name } = req.body;

    if (!Team_Name) {
      return res.status(400).json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
    }

    if (await teamExistsByName(Team_Name)) {
      return res.status(400).json({ error: '–ö–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    const result = await pool
      .request()
      .input('Team_Name', sql.NVarChar, Team_Name.trim())
      .query('INSERT INTO Teams (Team_Name, Status) OUTPUT INSERTED.ID_Team VALUES (@Team_Name, \'–í –ø—Ä–æ—Ü–µ—Å—Å–µ\')');

    res.status(201).json({
      ID_Team: result.recordset[0].ID_Team,
      Team_Name,
      members: [],
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã:', error);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É' });
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
const updateTeamName = async (req, res) => {
  try {
    await poolConnect;
    const { teamId } = req.params;
    const { Team_Name } = req.body;

    if (!Team_Name) {
      return res.status(400).json({ message: '–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
    }

    if (await teamExistsByName(Team_Name, teamId)) {
      return res.status(400).json({ message: '–ö–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    await pool
      .request()
      .input('ID_Team', teamId)
      .input('Team_Name', sql.NVarChar, Team_Name.trim())
      .query('UPDATE Teams SET Team_Name = @Team_Name WHERE ID_Team = @ID_Team');

    res.status(200).json({ message: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–æ' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã' });
  }
};

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
const addTeamMember = async (req, res) => {
  try {
    await poolConnect;
    const { teamId, fullName, email, role } = req.body;

    if (!teamId || !fullName || !email || !role) {
      return res.status(400).json({ message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    const userResult = await pool
      .request()
      .input('Email', sql.NVarChar, email)
      .query('SELECT ID_User FROM Users WHERE Email = @Email');

    if (userResult.recordset.length === 0) {
      return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const userId = userResult.recordset[0].ID_User;

    const existsResult = await pool
      .request()
      .input('ID_User', userId)
      .input('ID_Team', teamId)
      .query('SELECT 1 FROM TeamMembers WHERE ID_User = @ID_User AND ID_Team = @ID_Team');

    if (existsResult.recordset.length > 0) {
      return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–æ–º–∞–Ω–¥—ã' });
    }

    // üî• –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –≤ Users
await pool.request()
.input('ID_User', userId)
.input('Role_Name', sql.NVarChar, role)
.query(`
  UPDATE Users
  SET ID_Role = (
    SELECT TOP 1 ID_Role
    FROM Roles
    WHERE Role_Name = @Role_Name
  )
  WHERE ID_User = @ID_User
`);


    res.status(201).json({ message: '–£—á–∞—Å—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞' });
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
const removeTeamMember = async (req, res) => {
  try {
    await poolConnect;
    const { teamId, memberId } = req.params;

    await pool
      .request()
      .input('ID_Team', teamId)
      .input('ID_User', memberId)
      .query('DELETE FROM TeamMembers WHERE ID_Team = @ID_Team AND ID_User = @ID_User');

    res.status(200).json({ message: '–£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª—ë–Ω' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞' });
  }
};

const deleteTeam = async (req, res) => {
  try {
    await poolConnect;
    const { teamId } = req.params;

    // –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π Assignment
    await pool.request()
      .input('ID_Team', sql.Int, teamId)
      .query(`
        DELETE FROM Assignment 
        WHERE ID_Task IN (
          SELECT ID_Task FROM Tasks 
          WHERE ID_Order IN (SELECT ID_Order FROM Orders WHERE ID_Team = @ID_Team)
        );
      `);

    // –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–π Execution
    await pool.request()
      .input('ID_Team', sql.Int, teamId)
      .query(`
        DELETE FROM Execution 
        WHERE ID_Task IN (
          SELECT ID_Task FROM Tasks 
          WHERE ID_Order IN (SELECT ID_Order FROM Orders WHERE ID_Team = @ID_Team)
        );
      `);

    // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á Tasks
    await pool.request()
      .input('ID_Team', sql.Int, teamId)
      .query(`
        DELETE FROM Tasks 
        WHERE ID_Order IN (SELECT ID_Order FROM Orders WHERE ID_Team = @ID_Team);
      `);

    // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ Orders
    await pool.request()
      .input('ID_Team', sql.Int, teamId)
      .query('DELETE FROM Orders WHERE ID_Team = @ID_Team;');

    // –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ TeamMembers
    await pool.request()
      .input('ID_Team', sql.Int, teamId)
      .query('DELETE FROM TeamMembers WHERE ID_Team = @ID_Team;');

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–∞–º–æ–π –∫–æ–º–∞–Ω–¥—ã Teams
    await pool.request()
      .input('ID_Team', sql.Int, teamId)
      .query('DELETE FROM Teams WHERE ID_Team = @ID_Team;');

    res.status(200).json({ message: '–ö–æ–º–∞–Ω–¥–∞ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã' });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö' });
  }
};

// –ê—Ä—Ö–∏–≤–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
const archiveTeam = async (req, res) => {
  try {
    await poolConnect;
    const { teamId } = req.params;

    await pool
      .request()
      .input('ID_Team', teamId)
      .input('Status', sql.NVarChar, '–ê—Ä—Ö–∏–≤')
      .query('UPDATE Teams SET Status = @Status WHERE ID_Team = @ID_Team');

    res.status(200).json({ message: '–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã' });
  }
};

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
const restoreTeam = async (req, res) => {
  try {
    await poolConnect;
    const { teamId } = req.params;

    await pool
      .request()
      .input('ID_Team', teamId)
      .input('Status', sql.NVarChar, '–í –ø—Ä–æ—Ü–µ—Å—Å–µ')
      .query('UPDATE Teams SET Status = @Status WHERE ID_Team = @ID_Team');

    res.status(200).json({ message: '–ö–æ–º–∞–Ω–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã' });
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
const createTeamWithMembers = async (req, res) => {
  try {
    await poolConnect;
    const { Team_Name, Members } = req.body;

    if (!Team_Name) {
      return res.status(400).json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
    }

    if (!Members || Members.length < 3) {
      return res.status(400).json({ error: '–ú–∏–Ω–∏–º—É–º 3 —É—á–∞—Å—Ç–Ω–∏–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
    }

    if (await teamExistsByName(Team_Name)) {
      return res.status(400).json({ error: '–ö–æ–º–∞–Ω–¥–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    const result = await pool
      .request()
      .input('Team_Name', sql.NVarChar, Team_Name.trim())
      .query('INSERT INTO Teams (Team_Name, Status) OUTPUT INSERTED.ID_Team VALUES (@Team_Name, \'–í –ø—Ä–æ—Ü–µ—Å—Å–µ\')');

    const teamId = result.recordset[0].ID_Team;

    for (const member of Members) {
      const userResult = await pool
        .request()
        .input('ID_User', sql.Int, member.userId)
        .query('SELECT ID_User FROM Users WHERE ID_User = @ID_User');

      if (userResult.recordset.length === 0) {
        return res.status(400).json({ error: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${member.userId} –Ω–µ –Ω–∞–π–¥–µ–Ω` });
      }

      await pool
        .request()
        .input('ID_User', sql.Int, member.userId)
        .input('ID_Team', sql.Int, teamId)
        .input('Role', sql.NVarChar, member.role)
        .query('INSERT INTO TeamMembers (ID_User, ID_Team, Role) VALUES (@ID_User, @ID_Team, @Role)');
    }

    res.status(201).json({ message: '–ö–æ–º–∞–Ω–¥–∞ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã', teamId });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏' });
  }
};


const archiveTeamWithProjectsAndTasks = async (req, res) => {
  await poolConnect;
  const transaction = new sql.Transaction(pool);
  try {
    await transaction.begin();

    const { teamId } = req.params;

    // –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–∫–∞–∑–æ–≤
    const request1 = new sql.Request(transaction);
    await request1
      .input('ID_Team', sql.Int, teamId)
      .input('OrderStatus', sql.NVarChar, '–ó–∞–∫—Ä—ã—Ç')
      .query('UPDATE Orders SET Status = @OrderStatus WHERE ID_Team = @ID_Team');

    // –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
    const request2 = new sql.Request(transaction);
    await request2
      .input('ID_Team', sql.Int, teamId)
      .input('TaskStatus', sql.NVarChar, '–ó–∞–≤–µ—Ä—à–µ–Ω–∞')
      .query(`
        UPDATE Tasks
        SET ID_Status = (SELECT TOP 1 ID_Status FROM Statuses WHERE Status_Name = @TaskStatus)
        WHERE ID_Order IN (SELECT ID_Order FROM Orders WHERE ID_Team = @ID_Team)
      `);

    // –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã
    const request3 = new sql.Request(transaction);
    await request3
      .input('ID_Team', sql.Int, teamId)
      .input('Status', sql.NVarChar, '–ê—Ä—Ö–∏–≤')
      .query('UPDATE Teams SET Status = @Status WHERE ID_Team = @ID_Team');

    await transaction.commit();

    res.status(200).json({ message: '–ö–æ–º–∞–Ω–¥–∞, –∑–∞–∫–∞–∑—ã –∏ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω—ã' });

  } catch (err) {
    await transaction.rollback();
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', err);
    res.status(500).json({
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.',
      error: err.message,
      stack: err.stack,
    });
  }
};


// –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤–º–µ—Å—Ç–µ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –∑–∞–¥–∞—á–∞–º–∏
const deleteTeamWithProjectsAndTasks = async (req, res) => {
  try {
    await poolConnect;
    const { teamId } = req.params;

    // –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á–∏
    await pool.request()
      .input('ID_Team', sql.Int, teamId)
      .input('TaskStatus', sql.NVarChar, '–ó–∞–≤–µ—Ä—à–µ–Ω–∞')
      .query(`
        UPDATE Tasks
        SET ID_Status = (SELECT TOP 1 ID_Status FROM Statuses WHERE Status_Name = @TaskStatus)
        WHERE ID_Order IN (SELECT ID_Order FROM Orders WHERE ID_Team = @ID_Team)
      `);

    // –ó–∞–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑—ã (Orders)
    await pool.request()
      .input('ID_Team', sql.Int, teamId)
      .input('OrderStatus', sql.NVarChar, '–ó–∞–∫—Ä—ã—Ç')
      .query(`
        UPDATE Orders
        SET Status = @OrderStatus
        WHERE ID_Team = @ID_Team
      `);

    // –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    await pool.request()
      .input('ID_Team', sql.Int, teamId)
      .query('DELETE FROM TeamMembers WHERE ID_Team = @ID_Team');

    // –£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
    await pool.request()
      .input('ID_Team', sql.Int, teamId)
      .query('DELETE FROM Teams WHERE ID_Team = @ID_Team');

    res.status(200).json({ message: '–ö–æ–º–∞–Ω–¥–∞, –µ—ë –∑–∞–∫–∞–∑—ã –∏ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö' });
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã
const updateMemberRole = async (req, res) => {
  try {
    await poolConnect;
    const { teamId, memberId } = req.params;
    const { role } = req.body;

    if (!role) {
      return res.status(400).json({ message: '–†–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞' });
    }

    // 1Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –≤ TeamMembers
    const result = await pool.request()
      .input('ID_Team', sql.Int, teamId)
      .input('ID_User', sql.Int, memberId)
      .input('Role', sql.NVarChar, role)
      .query(`
        UPDATE TeamMembers
        SET Role = @Role
        WHERE ID_Team = @ID_Team AND ID_User = @ID_User
      `);

    if (result.rowsAffected[0] === 0) {
      return res.status(404).json({ message: '–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–∞–Ω–¥–µ' });
    }

    // 2Ô∏è‚É£ –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ Users
    await pool.request()
      .input('ID_User', sql.Int, memberId)
      .input('Role_Name', sql.NVarChar, role)
      .query(`
        UPDATE Users
        SET ID_Role = (
          SELECT TOP 1 ID_Role
          FROM Roles
          WHERE Role_Name = @Role_Name
        )
        WHERE ID_User = @ID_User
      `);

    res.status(200).json({ message: '–†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏' });
  }
};



const exportCustomTeams = async (req, res) => {
  try {
    const { teams, format, userEmail } = req.body;

    if (!teams || !Array.isArray(teams) || teams.length === 0) {
      return res.status(400).json({ error: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞' });
    }

    if (!userEmail) {
      return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const userTeams = teams.filter(team =>
      team.members.some(member => member.email === userEmail)
    );

    if (userTeams.length === 0) {
      return res.status(404).json({ error: '–ù–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞' });
    }

    const workbook = new excelJS.Workbook();
    const worksheet = workbook.addWorksheet('–ö–æ–º–∞–Ω–¥—ã');

    worksheet.columns = [
      { header: '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã', key: 'name', width: 30 },
      { header: '–§–ò–û —É—á–∞—Å—Ç–Ω–∏–∫–∞', key: 'fullName', width: 30 },
      { header: 'Email', key: 'email', width: 30 },
      { header: '–†–æ–ª—å', key: 'role', width: 20 },
    ];

    userTeams.forEach((team) => {
      team.members.forEach((member) => {
        worksheet.addRow({
          name: team.name,
          fullName: member.fullName,
          email: member.email,
          role: member.role,
        });
      });
    });

    res.setHeader(
      'Content-Type',
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    );
    res.setHeader(
      'Content-Disposition',
      'attachment; filename=custom_teams.xlsx'
    );

    await workbook.xlsx.write(res);
    res.end();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∫–æ–º–∞–Ω–¥:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∫–æ–º–∞–Ω–¥' });
  }
};

const getTeamByUserEmail = async (req, res) => {
  try {
    await poolConnect;
    const { email } = req.query;

    if (!email) {
      return res.status(400).json({ error: 'Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    const result = await pool
      .request()
      .input('Email', sql.NVarChar, email)
      .query(`
        SELECT TOP 1 t.Team_Name, t.ID_Team
        FROM Teams t
        JOIN TeamMembers tm ON t.ID_Team = tm.ID_Team
        JOIN Users u ON tm.ID_User = u.ID_User
        WHERE u.Email = @Email
      `);

    if (result.recordset.length === 0) {
      return res.status(404).json({ message: '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    res.status(200).json(result.recordset[0]);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –ø–æ email:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã' });
  }
};


module.exports = {
  getAllTeams,
  getTeamByUserEmail, // ‚úÖ ‚Üê –î–û–ë–ê–í–¨ –≠–¢–û
  createTeam,
  createTeamWithMembers,
  addTeamMember,
  removeTeamMember,
  updateMemberRole,
  deleteTeam,
  deleteTeamWithProjectsAndTasks,
  archiveTeam,
  restoreTeam,
  updateTeamName,
  archiveTeamWithProjectsAndTasks,
  exportCustomTeams,
};
