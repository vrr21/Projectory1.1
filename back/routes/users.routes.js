const express = require('express');
const router = express.Router();
const { pool, sql, poolConnect } = require('../config/db');
const bcrypt = require('bcryptjs');

// üìå –°–û–ó–î–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
router.post('/', async (req, res) => {
  const { First_Name, Last_Name, Email, Phone, Password } = req.body;

  if (!First_Name || !Last_Name || !Email || !Phone || !Password) {
    return res.status(400).json({ message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  try {
    await poolConnect;

    const existing = await pool.request()
      .input('Email', sql.NVarChar, Email)
      .query('SELECT * FROM Users WHERE Email = @Email');

    if (existing.recordset.length > 0) {
      return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    const hashedPassword = await bcrypt.hash(Password, 10);

    const roleResult = await pool.request()
      .input('RoleName', sql.NVarChar, '–°–æ—Ç—Ä—É–¥–Ω–∏–∫')
      .query('SELECT ID_Role FROM Roles WHERE Role_Name = @RoleName');

    const roleId = roleResult.recordset[0]?.ID_Role;
    if (!roleId) {
      return res.status(400).json({ message: '–†–æ–ª—å "–°–æ—Ç—Ä—É–¥–Ω–∏–∫" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    await pool.request()
      .input('First_Name', sql.NVarChar, First_Name)
      .input('Last_Name', sql.NVarChar, Last_Name)
      .input('Email', sql.NVarChar, Email)
      .input('Phone', sql.NVarChar, Phone)
      .input('Password', sql.NVarChar, hashedPassword)
      .input('ID_Role', sql.Int, roleId)
      .query(`
        INSERT INTO Users (First_Name, Last_Name, Email, Phone, Password, ID_Role)
        VALUES (@First_Name, @Last_Name, @Email, @Phone, @Password, @ID_Role)
      `);

    res.status(201).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// üìå –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (–≤–∫–ª—é—á–∞—è —Ä–æ–ª—å)
router.put('/:id', async (req, res) => {
  const { id } = req.params;
  const { First_Name, Last_Name, Email, Phone, Password, ID_Role } = req.body;

  if (!First_Name || !Last_Name || !Email || ID_Role === undefined) {
    return res.status(400).json({ message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
  }

  try {
    await poolConnect;

    const request = pool.request()
      .input('ID_User', sql.Int, id)
      .input('First_Name', sql.NVarChar, First_Name)
      .input('Last_Name', sql.NVarChar, Last_Name)
      .input('Email', sql.NVarChar, Email)
      .input('Phone', sql.NVarChar, Phone)
      .input('ID_Role', sql.Int, ID_Role);

    if (Password) {
      const hashedPassword = await bcrypt.hash(Password, 10);
      request.input('Password', sql.NVarChar, hashedPassword);
    }

    const updateQuery = `
      UPDATE Users
      SET First_Name = @First_Name,
          Last_Name = @Last_Name,
          Email = @Email,
          Phone = @Phone
          ${Password ? ', Password = @Password' : ''}
          , ID_Role = @ID_Role
      WHERE ID_User = @ID_User
    `;

    await request.query(updateQuery);

    // üî• –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º ‚Äî —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –∫–æ–º–∞–Ω–¥
    if (ID_Role === 1) {
      await pool.request()
        .input('ID_User', sql.Int, id)
        .query('DELETE FROM TeamMembers WHERE ID_User = @ID_User');
    }

    res.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' });
  }
});

// üìå –ê–†–•–ò–í–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
router.patch('/:id/archive', async (req, res) => {
  const { id } = req.params;
  const { Archived } = req.body;

  try {
    await poolConnect;
    await pool.request()
      .input('Archived', sql.Bit, Archived)
      .input('ID_User', sql.Int, id)
      .query(`UPDATE Users SET Archived = @Archived WHERE ID_User = @ID_User`);

    res.status(200).json({ message: Archived ? '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω' : '–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏' });
  }
});

// üìå –£–î–ê–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
router.delete('/:id', async (req, res) => {
  const { id } = req.params;

  try {
    await poolConnect;

    // –£–¥–∞–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    await pool.request().input('ID_User', sql.Int, id).query('DELETE FROM TeamMembers WHERE ID_User = @ID_User');
    await pool.request().input('ID_User', sql.Int, id).query('DELETE FROM Assignment WHERE ID_Employee = @ID_User');

    // –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await pool.request()
      .input('ID_User', sql.Int, id)
      .query('DELETE FROM Users WHERE ID_User = @ID_User');

    res.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è' });
  }
});

module.exports = router;
